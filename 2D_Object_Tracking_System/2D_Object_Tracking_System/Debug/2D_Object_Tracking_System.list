
2D_Object_Tracking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c44  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004ddc  08004ddc  00005ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e3c  08004e3c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e44  08004e44  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00005e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e48  08004e48  00005e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  08004eb4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004eb4  000062c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c631  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b67  00000000  00000000  000126c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00014230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c5  00000000  00000000  00014eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001728d  00000000  00000000  00015875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf8d  00000000  00000000  0002cb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009094e  00000000  00000000  00039a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca3dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000ca420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ce0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004dc4 	.word	0x08004dc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08004dc4 	.word	0x08004dc4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <__io_putchar>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// UART support for printf
int __io_putchar(int ch) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000d88:	1d39      	adds	r1, r7, #4
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <__io_putchar+0x20>)
 8000d92:	f002 fe31 	bl	80039f8 <HAL_UART_Transmit>
    return ch;
 8000d96:	687b      	ldr	r3, [r7, #4]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000114 	.word	0x20000114

08000da4 <HAL_GPIO_EXTI_Callback>:

// EXTI Callback for ultrasonic sensors
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  static uint16_t rising_time1 = 0, rising_time2 = 0;
  static uint8_t state1 = 0, state2 = 0;
  uint16_t current_time = TIM2->CNT;
 8000dae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db4:	81fb      	strh	r3, [r7, #14]

  if (GPIO_Pin == ECHO1_Pin) {
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b10      	cmp	r3, #16
 8000dba:	d136      	bne.n	8000e2a <HAL_GPIO_EXTI_Callback+0x86>
    if (state1 == 0 && HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin)) {
 8000dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10d      	bne.n	8000de0 <HAL_GPIO_EXTI_Callback+0x3c>
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4839      	ldr	r0, [pc, #228]	@ (8000eac <HAL_GPIO_EXTI_Callback+0x108>)
 8000dc8:	f001 fa14 	bl	80021f4 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <HAL_GPIO_EXTI_Callback+0x3c>
      rising_time1 = current_time;
 8000dd2:	4a37      	ldr	r2, [pc, #220]	@ (8000eb0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000dd4:	89fb      	ldrh	r3, [r7, #14]
 8000dd6:	8013      	strh	r3, [r2, #0]
      state1 = 1;
 8000dd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ea8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e024      	b.n	8000e2a <HAL_GPIO_EXTI_Callback+0x86>
    } else if (state1 == 1 && !HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin)) {
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d120      	bne.n	8000e2a <HAL_GPIO_EXTI_Callback+0x86>
 8000de8:	2110      	movs	r1, #16
 8000dea:	4830      	ldr	r0, [pc, #192]	@ (8000eac <HAL_GPIO_EXTI_Callback+0x108>)
 8000dec:	f001 fa02 	bl	80021f4 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d119      	bne.n	8000e2a <HAL_GPIO_EXTI_Callback+0x86>
      pulse_width1 = (current_time >= rising_time1) ?
 8000df6:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
          (current_time - rising_time1) :
 8000dfa:	89fa      	ldrh	r2, [r7, #14]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d305      	bcc.n	8000e0c <HAL_GPIO_EXTI_Callback+0x68>
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	4a2b      	ldr	r2, [pc, #172]	@ (8000eb0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_EXTI_Callback+0x76>
          (current_time + 65536 - rising_time1);
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000e12:	4a27      	ldr	r2, [pc, #156]	@ (8000eb0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	1a9b      	subs	r3, r3, r2
          (current_time - rising_time1) :
 8000e18:	461a      	mov	r2, r3
      pulse_width1 = (current_time >= rising_time1) ?
 8000e1a:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e1c:	601a      	str	r2, [r3, #0]
      state1 = 0;
 8000e1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
      new_data1 = 1;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
    }
  }

  if (GPIO_Pin == ECHO2_Pin) {
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	d136      	bne.n	8000e9e <HAL_GPIO_EXTI_Callback+0xfa>
    if (state2 == 0 && HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin)) {
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10d      	bne.n	8000e54 <HAL_GPIO_EXTI_Callback+0xb0>
 8000e38:	2120      	movs	r1, #32
 8000e3a:	481c      	ldr	r0, [pc, #112]	@ (8000eac <HAL_GPIO_EXTI_Callback+0x108>)
 8000e3c:	f001 f9da 	bl	80021f4 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <HAL_GPIO_EXTI_Callback+0xb0>
      rising_time2 = current_time;
 8000e46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e48:	89fb      	ldrh	r3, [r7, #14]
 8000e4a:	8013      	strh	r3, [r2, #0]
      state2 = 1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
          (current_time + 65536 - rising_time2);
      state2 = 0;
      new_data2 = 1;
    }
  }
}
 8000e52:	e024      	b.n	8000e9e <HAL_GPIO_EXTI_Callback+0xfa>
    } else if (state2 == 1 && !HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin)) {
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d120      	bne.n	8000e9e <HAL_GPIO_EXTI_Callback+0xfa>
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4813      	ldr	r0, [pc, #76]	@ (8000eac <HAL_GPIO_EXTI_Callback+0x108>)
 8000e60:	f001 f9c8 	bl	80021f4 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d119      	bne.n	8000e9e <HAL_GPIO_EXTI_Callback+0xfa>
      pulse_width2 = (current_time >= rising_time2) ?
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
          (current_time - rising_time2) :
 8000e6e:	89fa      	ldrh	r2, [r7, #14]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d305      	bcc.n	8000e80 <HAL_GPIO_EXTI_Callback+0xdc>
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e78:	8812      	ldrh	r2, [r2, #0]
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_EXTI_Callback+0xea>
          (current_time + 65536 - rising_time2);
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e88:	8812      	ldrh	r2, [r2, #0]
 8000e8a:	1a9b      	subs	r3, r3, r2
          (current_time - rising_time2) :
 8000e8c:	461a      	mov	r2, r3
      pulse_width2 = (current_time >= rising_time2) ?
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e90:	601a      	str	r2, [r3, #0]
      state2 = 0;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
      new_data2 = 1;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000016c 	.word	0x2000016c
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	2000016e 	.word	0x2000016e
 8000eb4:	2000015c 	.word	0x2000015c
 8000eb8:	20000164 	.word	0x20000164
 8000ebc:	20000170 	.word	0x20000170
 8000ec0:	20000172 	.word	0x20000172
 8000ec4:	20000160 	.word	0x20000160
 8000ec8:	20000165 	.word	0x20000165

08000ecc <delay_us>:

// Microsecond Delay
void delay_us(uint16_t us) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
  for (uint32_t i = 0; i < us * 10; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e003      	b.n	8000ee4 <delay_us+0x18>
    __NOP(); // ~100ns per NOP at 100MHz
 8000edc:	bf00      	nop
  for (uint32_t i = 0; i < us * 10; i++) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d3f2      	bcc.n	8000edc <delay_us+0x10>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <update_leds>:

// Update LED indicators based on angle
void update_leds(float angle_deg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
  // Turn off all LEDs first
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Left Red
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	4841      	ldr	r0, [pc, #260]	@ (8001018 <update_leds+0x114>)
 8000f14:	f001 f986 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Left Yellow
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	483e      	ldr	r0, [pc, #248]	@ (8001018 <update_leds+0x114>)
 8000f1e:	f001 f981 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Green
 8000f22:	2200      	movs	r2, #0
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	483c      	ldr	r0, [pc, #240]	@ (8001018 <update_leds+0x114>)
 8000f28:	f001 f97c 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Right Yellow
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	@ 0x40
 8000f30:	483a      	ldr	r0, [pc, #232]	@ (800101c <update_leds+0x118>)
 8000f32:	f001 f977 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // Right Red
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	4839      	ldr	r0, [pc, #228]	@ (8001020 <update_leds+0x11c>)
 8000f3c:	f001 f972 	bl	8002224 <HAL_GPIO_WritePin>

  // Determine which LED to light based on angle
  if (angle_deg >= CENTER_THRESHOLD_LOW && angle_deg <= CENTER_THRESHOLD_HIGH) {
 8000f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f44:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001024 <update_leds+0x120>
 8000f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	db0e      	blt.n	8000f70 <update_leds+0x6c>
 8000f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f56:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001028 <update_leds+0x124>
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	d805      	bhi.n	8000f70 <update_leds+0x6c>
    // Center position - Green LED
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2180      	movs	r1, #128	@ 0x80
 8000f68:	482b      	ldr	r0, [pc, #172]	@ (8001018 <update_leds+0x114>)
 8000f6a:	f001 f95b 	bl	8002224 <HAL_GPIO_WritePin>
 8000f6e:	e04f      	b.n	8001010 <update_leds+0x10c>
  }
  else if (angle_deg < LEFT_RED_THRESHOLD) {
 8000f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f74:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8000f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d505      	bpl.n	8000f8e <update_leds+0x8a>
    // Far left - Left Red
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2180      	movs	r1, #128	@ 0x80
 8000f86:	4826      	ldr	r0, [pc, #152]	@ (8001020 <update_leds+0x11c>)
 8000f88:	f001 f94c 	bl	8002224 <HAL_GPIO_WritePin>
  }
  else if (angle_deg > RIGHT_YELLOW_THRESHOLD && angle_deg <= RIGHT_RED_THRESHOLD) {
    // Between center and far right - Right Yellow
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
  }
}
 8000f8c:	e040      	b.n	8001010 <update_leds+0x10c>
  else if (angle_deg < LEFT_YELLOW_THRESHOLD && angle_deg >= LEFT_RED_THRESHOLD) {
 8000f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f92:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001024 <update_leds+0x120>
 8000f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d50e      	bpl.n	8000fbe <update_leds+0xba>
 8000fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa4:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8000fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	db05      	blt.n	8000fbe <update_leds+0xba>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	@ 0x40
 8000fb6:	4819      	ldr	r0, [pc, #100]	@ (800101c <update_leds+0x118>)
 8000fb8:	f001 f934 	bl	8002224 <HAL_GPIO_WritePin>
 8000fbc:	e028      	b.n	8001010 <update_leds+0x10c>
  else if (angle_deg > RIGHT_RED_THRESHOLD) {
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800102c <update_leds+0x128>
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	dd05      	ble.n	8000fdc <update_leds+0xd8>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4810      	ldr	r0, [pc, #64]	@ (8001018 <update_leds+0x114>)
 8000fd6:	f001 f925 	bl	8002224 <HAL_GPIO_WritePin>
}
 8000fda:	e019      	b.n	8001010 <update_leds+0x10c>
  else if (angle_deg > RIGHT_YELLOW_THRESHOLD && angle_deg <= RIGHT_RED_THRESHOLD) {
 8000fdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001028 <update_leds+0x124>
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	dc00      	bgt.n	8000ff0 <update_leds+0xec>
}
 8000fee:	e00f      	b.n	8001010 <update_leds+0x10c>
  else if (angle_deg > RIGHT_YELLOW_THRESHOLD && angle_deg <= RIGHT_RED_THRESHOLD) {
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800102c <update_leds+0x128>
 8000ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	d900      	bls.n	8001004 <update_leds+0x100>
}
 8001002:	e005      	b.n	8001010 <update_leds+0x10c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2140      	movs	r1, #64	@ 0x40
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <update_leds+0x114>)
 800100a:	f001 f90b 	bl	8002224 <HAL_GPIO_WritePin>
}
 800100e:	e7ff      	b.n	8001010 <update_leds+0x10c>
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	42a00000 	.word	0x42a00000
 8001028:	42c80000 	.word	0x42c80000
 800102c:	431f0000 	.word	0x431f0000

08001030 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
  HAL_Init();
 8001036:	f000 fdb1 	bl	8001b9c <HAL_Init>
  SystemClock_Config();
 800103a:	f000 f977 	bl	800132c <SystemClock_Config>
  MX_GPIO_Init();
 800103e:	f000 faf7 	bl	8001630 <MX_GPIO_Init>
  MX_USART2_UART_Init();  // Initialize UART
 8001042:	f000 facb 	bl	80015dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001046:	f000 f9db 	bl	8001400 <MX_TIM1_Init>
  MX_TIM2_Init();
 800104a:	f000 fa7b 	bl	8001544 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800104e:	48a4      	ldr	r0, [pc, #656]	@ (80012e0 <main+0x2b0>)
 8001050:	f001 fe02 	bl	8002c58 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001054:	2100      	movs	r1, #0
 8001056:	48a3      	ldr	r0, [pc, #652]	@ (80012e4 <main+0x2b4>)
 8001058:	f001 feb2 	bl	8002dc0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500); // Center servo
 800105c:	4ba1      	ldr	r3, [pc, #644]	@ (80012e4 <main+0x2b4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34

  // Initialize LEDs to OFF
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	21e0      	movs	r1, #224	@ 0xe0
 800106a:	489f      	ldr	r0, [pc, #636]	@ (80012e8 <main+0x2b8>)
 800106c:	f001 f8da 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2140      	movs	r1, #64	@ 0x40
 8001074:	489d      	ldr	r0, [pc, #628]	@ (80012ec <main+0x2bc>)
 8001076:	f001 f8d5 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2180      	movs	r1, #128	@ 0x80
 800107e:	489c      	ldr	r0, [pc, #624]	@ (80012f0 <main+0x2c0>)
 8001080:	f001 f8d0 	bl	8002224 <HAL_GPIO_WritePin>

  printf("System Started\r\n");
 8001084:	489b      	ldr	r0, [pc, #620]	@ (80012f4 <main+0x2c4>)
 8001086:	f003 f98b 	bl	80043a0 <puts>
  /* USER CODE END 2 */

  while (1) {
    /* USER CODE BEGIN 3 */
    // Trigger Sensor 1
    HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4897      	ldr	r0, [pc, #604]	@ (80012ec <main+0x2bc>)
 8001090:	f001 f8c8 	bl	8002224 <HAL_GPIO_WritePin>
    delay_us(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f7ff ff19 	bl	8000ecc <delay_us>
    HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2101      	movs	r1, #1
 800109e:	4893      	ldr	r0, [pc, #588]	@ (80012ec <main+0x2bc>)
 80010a0:	f001 f8c0 	bl	8002224 <HAL_GPIO_WritePin>

    // Wait for measurement (timeout: 100ms)
    uint32_t start = HAL_GetTick();
 80010a4:	f000 fde0 	bl	8001c68 <HAL_GetTick>
 80010a8:	6178      	str	r0, [r7, #20]
    while (!new_data1 && (HAL_GetTick() - start) < 100);
 80010aa:	bf00      	nop
 80010ac:	4b92      	ldr	r3, [pc, #584]	@ (80012f8 <main+0x2c8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <main+0x94>
 80010b6:	f000 fdd7 	bl	8001c68 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b63      	cmp	r3, #99	@ 0x63
 80010c2:	d9f3      	bls.n	80010ac <main+0x7c>
    if (new_data1) new_data1 = 0; else pulse_width1 = 0;
 80010c4:	4b8c      	ldr	r3, [pc, #560]	@ (80012f8 <main+0x2c8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <main+0xa6>
 80010ce:	4b8a      	ldr	r3, [pc, #552]	@ (80012f8 <main+0x2c8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e002      	b.n	80010dc <main+0xac>
 80010d6:	4b89      	ldr	r3, [pc, #548]	@ (80012fc <main+0x2cc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

    // Trigger Sensor 2
    HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2102      	movs	r1, #2
 80010e0:	4882      	ldr	r0, [pc, #520]	@ (80012ec <main+0x2bc>)
 80010e2:	f001 f89f 	bl	8002224 <HAL_GPIO_WritePin>
    delay_us(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f7ff fef0 	bl	8000ecc <delay_us>
    HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2102      	movs	r1, #2
 80010f0:	487e      	ldr	r0, [pc, #504]	@ (80012ec <main+0x2bc>)
 80010f2:	f001 f897 	bl	8002224 <HAL_GPIO_WritePin>

    start = HAL_GetTick();
 80010f6:	f000 fdb7 	bl	8001c68 <HAL_GetTick>
 80010fa:	6178      	str	r0, [r7, #20]
    while (!new_data2 && (HAL_GetTick() - start) < 100);
 80010fc:	bf00      	nop
 80010fe:	4b80      	ldr	r3, [pc, #512]	@ (8001300 <main+0x2d0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <main+0xe6>
 8001108:	f000 fdae 	bl	8001c68 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b63      	cmp	r3, #99	@ 0x63
 8001114:	d9f3      	bls.n	80010fe <main+0xce>
    if (new_data2) new_data2 = 0; else pulse_width2 = 0;
 8001116:	4b7a      	ldr	r3, [pc, #488]	@ (8001300 <main+0x2d0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <main+0xf8>
 8001120:	4b77      	ldr	r3, [pc, #476]	@ (8001300 <main+0x2d0>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e002      	b.n	800112e <main+0xfe>
 8001128:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <main+0x2d4>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]

    // Calculate distances (cm)
    float dist1 = (pulse_width1 > 0) ? (pulse_width1 * 0.034 / 2) : 400.0;
 800112e:	4b73      	ldr	r3, [pc, #460]	@ (80012fc <main+0x2cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01b      	beq.n	800116e <main+0x13e>
 8001136:	4b71      	ldr	r3, [pc, #452]	@ (80012fc <main+0x2cc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f98e 	bl	800045c <__aeabi_ui2d>
 8001140:	a361      	add	r3, pc, #388	@ (adr r3, 80012c8 <main+0x298>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa03 	bl	8000550 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800115a:	f7ff fb23 	bl	80007a4 <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc25 	bl	80009b4 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	e000      	b.n	8001170 <main+0x140>
 800116e:	4b66      	ldr	r3, [pc, #408]	@ (8001308 <main+0x2d8>)
 8001170:	613b      	str	r3, [r7, #16]
    float dist2 = (pulse_width2 > 0) ? (pulse_width2 * 0.034 / 2) : 400.0;
 8001172:	4b64      	ldr	r3, [pc, #400]	@ (8001304 <main+0x2d4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d01b      	beq.n	80011b2 <main+0x182>
 800117a:	4b62      	ldr	r3, [pc, #392]	@ (8001304 <main+0x2d4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f96c 	bl	800045c <__aeabi_ui2d>
 8001184:	a350      	add	r3, pc, #320	@ (adr r3, 80012c8 <main+0x298>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	f7ff f9e1 	bl	8000550 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800119e:	f7ff fb01 	bl	80007a4 <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc03 	bl	80009b4 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e000      	b.n	80011b4 <main+0x184>
 80011b2:	4b55      	ldr	r3, [pc, #340]	@ (8001308 <main+0x2d8>)
 80011b4:	60fb      	str	r3, [r7, #12]

    // Object tracking logic
    angle_deg = 90.0; // Default center
 80011b6:	4b55      	ldr	r3, [pc, #340]	@ (800130c <main+0x2dc>)
 80011b8:	4a55      	ldr	r2, [pc, #340]	@ (8001310 <main+0x2e0>)
 80011ba:	601a      	str	r2, [r3, #0]
    const float SENSOR_DISTANCE = 9.0; // Sensor spacing (cm)
 80011bc:	4b55      	ldr	r3, [pc, #340]	@ (8001314 <main+0x2e4>)
 80011be:	60bb      	str	r3, [r7, #8]

    if (dist1 < 400.0 || dist2 < 400.0) {
 80011c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001318 <main+0x2e8>
 80011c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d408      	bmi.n	80011e4 <main+0x1b4>
 80011d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d6:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001318 <main+0x2e8>
 80011da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	d54b      	bpl.n	800127c <main+0x24c>
      float diff = dist2 - dist1;
 80011e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	edc7 7a01 	vstr	s15, [r7, #4]
      angle_deg = 90.0 + (atan2f(diff, SENSOR_DISTANCE) * 180.0 / M_PI);
 80011f4:	edd7 0a02 	vldr	s1, [r7, #8]
 80011f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011fc:	f003 fc64 	bl	8004ac8 <atan2f>
 8001200:	ee10 3a10 	vmov	r3, s0
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f94b 	bl	80004a0 <__aeabi_f2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b43      	ldr	r3, [pc, #268]	@ (800131c <main+0x2ec>)
 8001210:	f7ff f99e 	bl	8000550 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a32c      	add	r3, pc, #176	@ (adr r3, 80012d0 <main+0x2a0>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fabf 	bl	80007a4 <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <main+0x2f0>)
 8001234:	f7fe ffd6 	bl	80001e4 <__adddf3>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fbb8 	bl	80009b4 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	4a31      	ldr	r2, [pc, #196]	@ (800130c <main+0x2dc>)
 8001248:	6013      	str	r3, [r2, #0]
      if (angle_deg < 0) angle_deg = 0;
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <main+0x2dc>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	d503      	bpl.n	8001262 <main+0x232>
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <main+0x2dc>)
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
      if (angle_deg > 180) angle_deg = 180;
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <main+0x2dc>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001324 <main+0x2f4>
 800126c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	dd02      	ble.n	800127c <main+0x24c>
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <main+0x2dc>)
 8001278:	4a2b      	ldr	r2, [pc, #172]	@ (8001328 <main+0x2f8>)
 800127a:	601a      	str	r2, [r3, #0]
    }

    // Convert angle to PWM pulse (1000µs=0°, 2000µs=180°)
    uint32_t pulse = 1000 + (uint32_t)(angle_deg * (1000.0 / 180.0));
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <main+0x2dc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f90d 	bl	80004a0 <__aeabi_f2d>
 8001286:	a314      	add	r3, pc, #80	@ (adr r3, 80012d8 <main+0x2a8>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f960 	bl	8000550 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fb6c 	bl	8000974 <__aeabi_d2uiz>
 800129c:	4603      	mov	r3, r0
 800129e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80012a2:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <main+0x2b4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34

    // Update LED indicators
    update_leds(angle_deg);
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <main+0x2dc>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	eeb0 0a67 	vmov.f32	s0, s15
 80012b6:	f7ff fe25 	bl	8000f04 <update_leds>

    HAL_Delay(50); // Cycle delay
 80012ba:	2032      	movs	r0, #50	@ 0x32
 80012bc:	f000 fce0 	bl	8001c80 <HAL_Delay>
  while (1) {
 80012c0:	e6e3      	b.n	800108a <main+0x5a>
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	b020c49c 	.word	0xb020c49c
 80012cc:	3fa16872 	.word	0x3fa16872
 80012d0:	54442d18 	.word	0x54442d18
 80012d4:	400921fb 	.word	0x400921fb
 80012d8:	8e38e38e 	.word	0x8e38e38e
 80012dc:	401638e3 	.word	0x401638e3
 80012e0:	200000cc 	.word	0x200000cc
 80012e4:	20000084 	.word	0x20000084
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	08004ddc 	.word	0x08004ddc
 80012f8:	20000164 	.word	0x20000164
 80012fc:	2000015c 	.word	0x2000015c
 8001300:	20000165 	.word	0x20000165
 8001304:	20000160 	.word	0x20000160
 8001308:	43c80000 	.word	0x43c80000
 800130c:	20000168 	.word	0x20000168
 8001310:	42b40000 	.word	0x42b40000
 8001314:	41100000 	.word	0x41100000
 8001318:	43c80000 	.word	0x43c80000
 800131c:	40668000 	.word	0x40668000
 8001320:	40568000 	.word	0x40568000
 8001324:	43340000 	.word	0x43340000
 8001328:	43340000 	.word	0x43340000

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	@ 0x50
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2230      	movs	r2, #48	@ 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f003 f910 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <SystemClock_Config+0xcc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <SystemClock_Config+0xcc>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <SystemClock_Config+0xcc>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <SystemClock_Config+0xd0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <SystemClock_Config+0xd0>)
 8001376:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <SystemClock_Config+0xd0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001390:	2310      	movs	r3, #16
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001394:	2302      	movs	r3, #2
 8001396:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001398:	2300      	movs	r3, #0
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800139c:	2310      	movs	r3, #16
 800139e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013a6:	2304      	movs	r3, #4
 80013a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013aa:	2304      	movs	r3, #4
 80013ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 ff68 	bl	8002288 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013be:	f000 f9eb 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c2:	230f      	movs	r3, #15
 80013c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c6:	2302      	movs	r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2102      	movs	r1, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 f9ca 	bl	8002778 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ea:	f000 f9d5 	bl	8001798 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	@ 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b096      	sub	sp, #88	@ 0x58
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2220      	movs	r2, #32
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f891 	bl	8004560 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800143e:	4b3f      	ldr	r3, [pc, #252]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001440:	4a3f      	ldr	r2, [pc, #252]	@ (8001540 <MX_TIM1_Init+0x140>)
 8001442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001444:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001446:	2263      	movs	r2, #99	@ 0x63
 8001448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <MX_TIM1_Init+0x13c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001450:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001452:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001456:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b38      	ldr	r3, [pc, #224]	@ (800153c <MX_TIM1_Init+0x13c>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800145e:	4b37      	ldr	r3, [pc, #220]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b35      	ldr	r3, [pc, #212]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800146a:	4834      	ldr	r0, [pc, #208]	@ (800153c <MX_TIM1_Init+0x13c>)
 800146c:	f001 fba4 	bl	8002bb8 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001476:	f000 f98f 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001484:	4619      	mov	r1, r3
 8001486:	482d      	ldr	r0, [pc, #180]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001488:	f001 fe0c 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001492:	f000 f981 	bl	8001798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001496:	4829      	ldr	r0, [pc, #164]	@ (800153c <MX_TIM1_Init+0x13c>)
 8001498:	f001 fc38 	bl	8002d0c <HAL_TIM_PWM_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014a2:	f000 f979 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014b2:	4619      	mov	r1, r3
 80014b4:	4821      	ldr	r0, [pc, #132]	@ (800153c <MX_TIM1_Init+0x13c>)
 80014b6:	f002 f98f 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014c0:	f000 f96a 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	@ 0x60
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 80014c8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4814      	ldr	r0, [pc, #80]	@ (800153c <MX_TIM1_Init+0x13c>)
 80014ec:	f001 fd18 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80014f6:	f000 f94f 	bl	8001798 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800150e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001512:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4807      	ldr	r0, [pc, #28]	@ (800153c <MX_TIM1_Init+0x13c>)
 800151e:	f002 f9c9 	bl	80038b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001528:	f000 f936 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <MX_TIM1_Init+0x13c>)
 800152e:	f000 f997 	bl	8001860 <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3758      	adds	r7, #88	@ 0x58
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000084 	.word	0x20000084
 8001540:	40010000 	.word	0x40010000

08001544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_TIM2_Init+0x94>)
 8001562:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_TIM2_Init+0x94>)
 800156a:	2263      	movs	r2, #99	@ 0x63
 800156c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_TIM2_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_TIM2_Init+0x94>)
 8001576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800157a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_TIM2_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_TIM2_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001588:	4813      	ldr	r0, [pc, #76]	@ (80015d8 <MX_TIM2_Init+0x94>)
 800158a:	f001 fb15 	bl	8002bb8 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001594:	f000 f900 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <MX_TIM2_Init+0x94>)
 80015a6:	f001 fd7d 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 f8f2 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_TIM2_Init+0x94>)
 80015c2:	f002 f909 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f000 f8e4 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200000cc 	.word	0x200000cc

080015dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f002 f9a0 	bl	8003958 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f8bb 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000114 	.word	0x20000114
 800162c:	40004400 	.word	0x40004400

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b4f      	ldr	r3, [pc, #316]	@ (8001788 <MX_GPIO_Init+0x158>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a4e      	ldr	r2, [pc, #312]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b48      	ldr	r3, [pc, #288]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a47      	ldr	r2, [pc, #284]	@ (8001788 <MX_GPIO_Init+0x158>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b45      	ldr	r3, [pc, #276]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a40      	ldr	r2, [pc, #256]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b3e      	ldr	r3, [pc, #248]	@ (8001788 <MX_GPIO_Init+0x158>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b3a      	ldr	r3, [pc, #232]	@ (8001788 <MX_GPIO_Init+0x158>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a39      	ldr	r2, [pc, #228]	@ (8001788 <MX_GPIO_Init+0x158>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <MX_GPIO_Init+0x158>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	21e0      	movs	r1, #224	@ 0xe0
 80016ba:	4834      	ldr	r0, [pc, #208]	@ (800178c <MX_GPIO_Init+0x15c>)
 80016bc:	f000 fdb2 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG1_Pin|TRIG2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2143      	movs	r1, #67	@ 0x43
 80016c4:	4832      	ldr	r0, [pc, #200]	@ (8001790 <MX_GPIO_Init+0x160>)
 80016c6:	f000 fdad 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2180      	movs	r1, #128	@ 0x80
 80016ce:	4831      	ldr	r0, [pc, #196]	@ (8001794 <MX_GPIO_Init+0x164>)
 80016d0:	f000 fda8 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	482a      	ldr	r0, [pc, #168]	@ (8001794 <MX_GPIO_Init+0x164>)
 80016ec:	f000 fbfe 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016f0:	23e0      	movs	r3, #224	@ 0xe0
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4821      	ldr	r0, [pc, #132]	@ (800178c <MX_GPIO_Init+0x15c>)
 8001708:	f000 fbf0 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG1_Pin TRIG2_Pin PB6 */
  GPIO_InitStruct.Pin = TRIG1_Pin|TRIG2_Pin|GPIO_PIN_6;
 800170c:	2343      	movs	r3, #67	@ 0x43
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	481b      	ldr	r0, [pc, #108]	@ (8001790 <MX_GPIO_Init+0x160>)
 8001724:	f000 fbe2 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4815      	ldr	r0, [pc, #84]	@ (8001794 <MX_GPIO_Init+0x164>)
 8001740:	f000 fbd4 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO1_Pin ECHO2_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin|ECHO2_Pin;
 8001744:	2330      	movs	r3, #48	@ 0x30
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;  // ← FIXED
 8001748:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	480d      	ldr	r0, [pc, #52]	@ (8001790 <MX_GPIO_Init+0x160>)
 800175a:	f000 fbc7 	bl	8001eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	200a      	movs	r0, #10
 8001764:	f000 fb8b 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001768:	200a      	movs	r0, #10
 800176a:	f000 fba4 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2017      	movs	r0, #23
 8001774:	f000 fb83 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001778:	2017      	movs	r0, #23
 800177a:	f000 fb9c 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020400 	.word	0x40020400
 8001794:	40020800 	.word	0x40020800

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <Error_Handler+0x8>

080017a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f000 fb40 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	@ (8001858 <HAL_TIM_Base_MspInit+0x64>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_TIM_Base_MspInit+0x68>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	4a13      	ldr	r2, [pc, #76]	@ (800185c <HAL_TIM_Base_MspInit+0x68>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6453      	str	r3, [r2, #68]	@ 0x44
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_TIM_Base_MspInit+0x68>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001822:	e012      	b.n	800184a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800182c:	d10d      	bne.n	800184a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_TIM_Base_MspInit+0x68>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_TIM_Base_MspInit+0x68>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_TIM_Base_MspInit+0x68>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40010000 	.word	0x40010000
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <HAL_TIM_MspPostInit+0x68>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d11e      	bne.n	80018c0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_TIM_MspPostInit+0x6c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <HAL_TIM_MspPostInit+0x6c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_TIM_MspPostInit+0x6c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800189e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4619      	mov	r1, r3
 80018ba:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <HAL_TIM_MspPostInit+0x70>)
 80018bc:	f000 fb16 	bl	8001eec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_UART_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_UART_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_UART_MspInit+0x88>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_UART_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_UART_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_UART_MspInit+0x88>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_UART_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800192e:	230c      	movs	r3, #12
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193e:	2307      	movs	r3, #7
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <HAL_UART_MspInit+0x8c>)
 800194a:	f000 facf 	bl	8001eec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40004400 	.word	0x40004400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f941 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO1_Pin);
 80019c6:	2010      	movs	r0, #16
 80019c8:	f000 fc46 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO2_Pin);
 80019d4:	2020      	movs	r0, #32
 80019d6:	f000 fc3f 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}

080019de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e00a      	b.n	8001a06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f0:	f3af 8000 	nop.w
 80019f4:	4601      	mov	r1, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbf0      	blt.n	80019f0 <_read+0x12>
  }

  return len;
 8001a0e:	687b      	ldr	r3, [r7, #4]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e009      	b.n	8001a3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9a4 	bl	8000d80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf1      	blt.n	8001a2a <_write+0x12>
  }
  return len;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_close>:

int _close(int file)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a78:	605a      	str	r2, [r3, #4]
  return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_isatty>:

int _isatty(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f002 fd88 	bl	80045fc <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	220c      	movs	r2, #12
 8001af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20020000 	.word	0x20020000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	20000174 	.word	0x20000174
 8001b20:	200002c8 	.word	0x200002c8

08001b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <SystemInit+0x20>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <SystemInit+0x20>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b4c:	f7ff ffea 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	@ (8001b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	@ (8001b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f002 fd47 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7a:	f7ff fa59 	bl	8001030 <main>
  bx  lr    
 8001b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b8c:	08004e4c 	.word	0x08004e4c
  ldr r2, =_sbss
 8001b90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b94:	200002c8 	.word	0x200002c8

08001b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <HAL_Init+0x40>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_Init+0x40>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_Init+0x40>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f94f 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff fde8 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f967 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c1c:	f000 f92f 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000178 	.word	0x20000178

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000178 	.word	0x20000178

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e48:	f7ff ff8e 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff29 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff3e 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff8e 	bl	8001dbc <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5d 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff31 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa2 	bl	8001e24 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e159      	b.n	80021bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8148 	bne.w	80021b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a2 	beq.w	80021b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <HAL_GPIO_Init+0x2e8>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	4a56      	ldr	r2, [pc, #344]	@ (80021d4 <HAL_GPIO_Init+0x2e8>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002080:	6453      	str	r3, [r2, #68]	@ 0x44
 8002082:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <HAL_GPIO_Init+0x2e8>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_GPIO_Init+0x2ec>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_GPIO_Init+0x2f0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x202>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a48      	ldr	r2, [pc, #288]	@ (80021e0 <HAL_GPIO_Init+0x2f4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x1fe>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a47      	ldr	r2, [pc, #284]	@ (80021e4 <HAL_GPIO_Init+0x2f8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x1fa>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a46      	ldr	r2, [pc, #280]	@ (80021e8 <HAL_GPIO_Init+0x2fc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x1f6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a45      	ldr	r2, [pc, #276]	@ (80021ec <HAL_GPIO_Init+0x300>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x1f2>
 80020da:	2304      	movs	r3, #4
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020de:	2307      	movs	r3, #7
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	@ (80021d8 <HAL_GPIO_Init+0x2ec>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a2f      	ldr	r2, [pc, #188]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a24      	ldr	r2, [pc, #144]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1a      	ldr	r2, [pc, #104]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a0f      	ldr	r2, [pc, #60]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f aea2 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd94 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40013c00 	.word	0x40013c00

08002288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e267      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d075      	beq.n	8002392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022a6:	4b88      	ldr	r3, [pc, #544]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d00c      	beq.n	80022cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b2:	4b85      	ldr	r3, [pc, #532]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d112      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022be:	4b82      	ldr	r3, [pc, #520]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05b      	beq.n	8002390 <HAL_RCC_OscConfig+0x108>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d157      	bne.n	8002390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e242      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x74>
 80022ee:	4b76      	ldr	r3, [pc, #472]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a75      	ldr	r2, [pc, #468]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b70      	ldr	r3, [pc, #448]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6f      	ldr	r2, [pc, #444]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6d      	ldr	r3, [pc, #436]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6c      	ldr	r2, [pc, #432]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 8002320:	4b69      	ldr	r3, [pc, #420]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a68      	ldr	r2, [pc, #416]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b66      	ldr	r3, [pc, #408]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a65      	ldr	r2, [pc, #404]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff fc92 	bl	8001c68 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fc8e 	bl	8001c68 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e207      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5b      	ldr	r3, [pc, #364]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xc0>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fc7e 	bl	8001c68 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fc7a 	bl	8001c68 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1f3      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0xe8>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800239e:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b47      	ldr	r3, [pc, #284]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b6:	4b44      	ldr	r3, [pc, #272]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b41      	ldr	r3, [pc, #260]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x152>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1c7      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3b      	ldr	r3, [pc, #236]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4937      	ldr	r1, [pc, #220]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b34      	ldr	r3, [pc, #208]	@ (80024cc <HAL_RCC_OscConfig+0x244>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff fc33 	bl	8001c68 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff fc2f 	bl	8001c68 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1a8      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4925      	ldr	r1, [pc, #148]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x244>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fc12 	bl	8001c68 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7ff fc0e 	bl	8001c68 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e187      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d036      	beq.n	80024e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_RCC_OscConfig+0x248>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7ff fbf2 	bl	8001c68 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7ff fbee 	bl	8001c68 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e167      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCC_OscConfig+0x240>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x200>
 80024a6:	e01b      	b.n	80024e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a8:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_RCC_OscConfig+0x248>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fbdb 	bl	8001c68 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	e00e      	b.n	80024d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b6:	f7ff fbd7 	bl	8001c68 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d907      	bls.n	80024d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e150      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
 80024c8:	40023800 	.word	0x40023800
 80024cc:	42470000 	.word	0x42470000
 80024d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b88      	ldr	r3, [pc, #544]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80024d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ea      	bne.n	80024b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8097 	beq.w	800261c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f2:	4b81      	ldr	r3, [pc, #516]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	4b7d      	ldr	r3, [pc, #500]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a7c      	ldr	r2, [pc, #496]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b7a      	ldr	r3, [pc, #488]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251a:	2301      	movs	r3, #1
 800251c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251e:	4b77      	ldr	r3, [pc, #476]	@ (80026fc <HAL_RCC_OscConfig+0x474>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d118      	bne.n	800255c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252a:	4b74      	ldr	r3, [pc, #464]	@ (80026fc <HAL_RCC_OscConfig+0x474>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a73      	ldr	r2, [pc, #460]	@ (80026fc <HAL_RCC_OscConfig+0x474>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002536:	f7ff fb97 	bl	8001c68 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7ff fb93 	bl	8001c68 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e10c      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4b6a      	ldr	r3, [pc, #424]	@ (80026fc <HAL_RCC_OscConfig+0x474>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x2ea>
 8002564:	4b64      	ldr	r3, [pc, #400]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a63      	ldr	r2, [pc, #396]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	e01c      	b.n	80025ac <HAL_RCC_OscConfig+0x324>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b05      	cmp	r3, #5
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x30c>
 800257a:	4b5f      	ldr	r3, [pc, #380]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	4a5e      	ldr	r2, [pc, #376]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6713      	str	r3, [r2, #112]	@ 0x70
 8002586:	4b5c      	ldr	r3, [pc, #368]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	4a5b      	ldr	r2, [pc, #364]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	@ 0x70
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0x324>
 8002594:	4b58      	ldr	r3, [pc, #352]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	4a57      	ldr	r2, [pc, #348]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a0:	4b55      	ldr	r3, [pc, #340]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a4:	4a54      	ldr	r2, [pc, #336]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80025a6:	f023 0304 	bic.w	r3, r3, #4
 80025aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fb58 	bl	8001c68 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff fb54 	bl	8001c68 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0cb      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d2:	4b49      	ldr	r3, [pc, #292]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ee      	beq.n	80025bc <HAL_RCC_OscConfig+0x334>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7ff fb42 	bl	8001c68 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e8:	f7ff fb3e 	bl	8001c68 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0b5      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fe:	4b3e      	ldr	r3, [pc, #248]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1ee      	bne.n	80025e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	4a38      	ldr	r2, [pc, #224]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a1 	beq.w	8002768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002626:	4b34      	ldr	r3, [pc, #208]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d05c      	beq.n	80026ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d141      	bne.n	80026be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <HAL_RCC_OscConfig+0x478>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fb12 	bl	8001c68 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7ff fb0e 	bl	8001c68 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e087      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	019b      	lsls	r3, r3, #6
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	491b      	ldr	r1, [pc, #108]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <HAL_RCC_OscConfig+0x478>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff fae7 	bl	8001c68 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7ff fae3 	bl	8001c68 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e05c      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x416>
 80026bc:	e054      	b.n	8002768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_RCC_OscConfig+0x478>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fad0 	bl	8001c68 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff facc 	bl	8001c68 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e045      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x444>
 80026ea:	e03d      	b.n	8002768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e038      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000
 8002700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x4ec>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d028      	beq.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d121      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d11a      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800273a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800273c:	4293      	cmp	r3, r2
 800273e:	d111      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	3b01      	subs	r3, #1
 800274e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0cc      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b68      	ldr	r3, [pc, #416]	@ (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d90c      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b65      	ldr	r3, [pc, #404]	@ (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a58      	ldr	r2, [pc, #352]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d044      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d119      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d003      	beq.n	8002836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002832:	2b03      	cmp	r3, #3
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b3f      	ldr	r3, [pc, #252]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3b      	ldr	r3, [pc, #236]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e067      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b37      	ldr	r3, [pc, #220]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4934      	ldr	r1, [pc, #208]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7ff f9fe 	bl	8001c68 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7ff f9fa 	bl	8001c68 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e04f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2b      	ldr	r3, [pc, #172]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d20c      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ea:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	@ (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	@ (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f95e 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00
 8002934:	40023800 	.word	0x40023800
 8002938:	08004dec 	.word	0x08004dec
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002948:	b094      	sub	sp, #80	@ 0x50
 800294a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295c:	4b79      	ldr	r3, [pc, #484]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d00d      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 8002968:	2b08      	cmp	r3, #8
 800296a:	f200 80e1 	bhi.w	8002b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x34>
 8002972:	2b04      	cmp	r3, #4
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x3a>
 8002976:	e0db      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b73      	ldr	r3, [pc, #460]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800297a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800297c:	e0db      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297e:	4b73      	ldr	r3, [pc, #460]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002982:	e0d8      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002984:	4b6f      	ldr	r3, [pc, #444]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800298c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d063      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	099b      	lsrs	r3, r3, #6
 80029a0:	2200      	movs	r2, #0
 80029a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ae:	2300      	movs	r3, #0
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029b6:	4622      	mov	r2, r4
 80029b8:	462b      	mov	r3, r5
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4621      	mov	r1, r4
 80029d0:	1a51      	subs	r1, r2, r1
 80029d2:	6139      	str	r1, [r7, #16]
 80029d4:	4629      	mov	r1, r5
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029e8:	4659      	mov	r1, fp
 80029ea:	018b      	lsls	r3, r1, #6
 80029ec:	4651      	mov	r1, sl
 80029ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f2:	4651      	mov	r1, sl
 80029f4:	018a      	lsls	r2, r1, #6
 80029f6:	4651      	mov	r1, sl
 80029f8:	ebb2 0801 	subs.w	r8, r2, r1
 80029fc:	4659      	mov	r1, fp
 80029fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a16:	4690      	mov	r8, r2
 8002a18:	4699      	mov	r9, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	eb18 0303 	adds.w	r3, r8, r3
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	462b      	mov	r3, r5
 8002a24:	eb49 0303 	adc.w	r3, r9, r3
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a36:	4629      	mov	r1, r5
 8002a38:	024b      	lsls	r3, r1, #9
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a40:	4621      	mov	r1, r4
 8002a42:	024a      	lsls	r2, r1, #9
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a54:	f7fd fffe 	bl	8000a54 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a60:	e058      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a62:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	f04f 0000 	mov.w	r0, #0
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	0159      	lsls	r1, r3, #5
 8002a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a8e:	0150      	lsls	r0, r2, #5
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4641      	mov	r1, r8
 8002a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	00eb      	lsls	r3, r5, #3
 8002ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aca:	00e2      	lsls	r2, r4, #3
 8002acc:	4614      	mov	r4, r2
 8002ace:	461d      	mov	r5, r3
 8002ad0:	4643      	mov	r3, r8
 8002ad2:	18e3      	adds	r3, r4, r3
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	eb45 0303 	adc.w	r3, r5, r3
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aea:	4629      	mov	r1, r5
 8002aec:	028b      	lsls	r3, r1, #10
 8002aee:	4621      	mov	r1, r4
 8002af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af4:	4621      	mov	r1, r4
 8002af6:	028a      	lsls	r2, r1, #10
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afe:	2200      	movs	r2, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	61fa      	str	r2, [r7, #28]
 8002b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b08:	f7fd ffa4 	bl	8000a54 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4613      	mov	r3, r2
 8002b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3750      	adds	r7, #80	@ 0x50
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	007a1200 	.word	0x007a1200

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000000 	.word	0x20000000

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	@ (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08004dfc 	.word	0x08004dfc

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffdc 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0b5b      	lsrs	r3, r3, #13
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	08004dfc 	.word	0x08004dfc

08002bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fe08 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fb1c 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d001      	beq.n	8002c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e03c      	b.n	8002cea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf8 <HAL_TIM_Base_Start+0xa0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d018      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x5c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8a:	d013      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x5c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1a      	ldr	r2, [pc, #104]	@ (8002cfc <HAL_TIM_Base_Start+0xa4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x5c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a19      	ldr	r2, [pc, #100]	@ (8002d00 <HAL_TIM_Base_Start+0xa8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x5c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <HAL_TIM_Base_Start+0xac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x5c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <HAL_TIM_Base_Start+0xb0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d010      	beq.n	8002ce8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	e007      	b.n	8002ce8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800
 8002d04:	40000c00 	.word	0x40000c00
 8002d08:	40014000 	.word	0x40014000

08002d0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e041      	b.n	8002da2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f839 	bl	8002daa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 fa72 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_TIM_PWM_Start+0x24>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e022      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d109      	bne.n	8002dfe <HAL_TIM_PWM_Start+0x3e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e015      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x58>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_TIM_PWM_Start+0x6a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e068      	b.n	8002f04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x82>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e40:	e013      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x92>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e50:	e00b      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e60:	e003      	b.n	8002e6a <HAL_TIM_PWM_Start+0xaa>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fc8a 	bl	800378c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a23      	ldr	r2, [pc, #140]	@ (8002f0c <HAL_TIM_PWM_Start+0x14c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d107      	bne.n	8002e92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_TIM_PWM_Start+0x14c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_TIM_PWM_Start+0x10e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea4:	d013      	beq.n	8002ece <HAL_TIM_PWM_Start+0x10e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_TIM_PWM_Start+0x150>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIM_PWM_Start+0x10e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	@ (8002f14 <HAL_TIM_PWM_Start+0x154>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_TIM_PWM_Start+0x10e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	@ (8002f18 <HAL_TIM_PWM_Start+0x158>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIM_PWM_Start+0x10e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <HAL_TIM_PWM_Start+0x15c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d010      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	e007      	b.n	8002f02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000c00 	.word	0x40000c00
 8002f1c:	40014000 	.word	0x40014000

08002f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0ae      	b.n	800309c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	f200 809f 	bhi.w	800308c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	0800308d 	.word	0x0800308d
 8002f5c:	0800308d 	.word	0x0800308d
 8002f60:	0800308d 	.word	0x0800308d
 8002f64:	08002fc9 	.word	0x08002fc9
 8002f68:	0800308d 	.word	0x0800308d
 8002f6c:	0800308d 	.word	0x0800308d
 8002f70:	0800308d 	.word	0x0800308d
 8002f74:	0800300b 	.word	0x0800300b
 8002f78:	0800308d 	.word	0x0800308d
 8002f7c:	0800308d 	.word	0x0800308d
 8002f80:	0800308d 	.word	0x0800308d
 8002f84:	0800304b 	.word	0x0800304b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f9d6 	bl	8003340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      break;
 8002fc6:	e064      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa1c 	bl	800340c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
      break;
 8003008:	e043      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fa67 	bl	80034e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0208 	orr.w	r2, r2, #8
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e023      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fab1 	bl	80035b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
      break;
 800308a:	e002      	b.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIM_ConfigClockSource+0x1c>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0b4      	b.n	800322a <HAL_TIM_ConfigClockSource+0x186>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f8:	d03e      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0xd4>
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030fe:	f200 8087 	bhi.w	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003106:	f000 8086 	beq.w	8003216 <HAL_TIM_ConfigClockSource+0x172>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310e:	d87f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b70      	cmp	r3, #112	@ 0x70
 8003112:	d01a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xa6>
 8003114:	2b70      	cmp	r3, #112	@ 0x70
 8003116:	d87b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b60      	cmp	r3, #96	@ 0x60
 800311a:	d050      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x11a>
 800311c:	2b60      	cmp	r3, #96	@ 0x60
 800311e:	d877      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b50      	cmp	r3, #80	@ 0x50
 8003122:	d03c      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xfa>
 8003124:	2b50      	cmp	r3, #80	@ 0x50
 8003126:	d873      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b40      	cmp	r3, #64	@ 0x40
 800312a:	d058      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x13a>
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d86f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b30      	cmp	r3, #48	@ 0x30
 8003132:	d064      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	2b30      	cmp	r3, #48	@ 0x30
 8003136:	d86b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d060      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d867      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05c      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d05a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	e062      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	f000 faf7 	bl	800374c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800316c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	609a      	str	r2, [r3, #8]
      break;
 8003176:	e04f      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	f000 fae0 	bl	800374c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800319a:	609a      	str	r2, [r3, #8]
      break;
 800319c:	e03c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	461a      	mov	r2, r3
 80031ac:	f000 fa54 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2150      	movs	r1, #80	@ 0x50
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 faad 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031bc:	e02c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 fa73 	bl	80036b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2160      	movs	r1, #96	@ 0x60
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fa9d 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031dc:	e01c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 fa34 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2140      	movs	r1, #64	@ 0x40
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fa8d 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e00c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f000 fa84 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 800320e:	e003      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e000      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a37      	ldr	r2, [pc, #220]	@ (8003324 <TIM_Base_SetConfig+0xf0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a34      	ldr	r2, [pc, #208]	@ (8003328 <TIM_Base_SetConfig+0xf4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a33      	ldr	r2, [pc, #204]	@ (800332c <TIM_Base_SetConfig+0xf8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a32      	ldr	r2, [pc, #200]	@ (8003330 <TIM_Base_SetConfig+0xfc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a28      	ldr	r2, [pc, #160]	@ (8003324 <TIM_Base_SetConfig+0xf0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328c:	d017      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a25      	ldr	r2, [pc, #148]	@ (8003328 <TIM_Base_SetConfig+0xf4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a24      	ldr	r2, [pc, #144]	@ (800332c <TIM_Base_SetConfig+0xf8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <TIM_Base_SetConfig+0xfc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a22      	ldr	r2, [pc, #136]	@ (8003334 <TIM_Base_SetConfig+0x100>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a21      	ldr	r2, [pc, #132]	@ (8003338 <TIM_Base_SetConfig+0x104>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a20      	ldr	r2, [pc, #128]	@ (800333c <TIM_Base_SetConfig+0x108>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003324 <TIM_Base_SetConfig+0xf0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d103      	bne.n	80032fe <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800

08003340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 0201 	bic.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f023 0302 	bic.w	r3, r3, #2
 8003388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <TIM_OC1_SetConfig+0xc8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10c      	bne.n	80033b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0308 	bic.w	r3, r3, #8
 80033a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <TIM_OC1_SetConfig+0xc8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d111      	bne.n	80033e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	621a      	str	r2, [r3, #32]
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	40010000 	.word	0x40010000

0800340c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f023 0210 	bic.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0320 	bic.w	r3, r3, #32
 8003456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1e      	ldr	r2, [pc, #120]	@ (80034e0 <TIM_OC2_SetConfig+0xd4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10d      	bne.n	8003488 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a15      	ldr	r2, [pc, #84]	@ (80034e0 <TIM_OC2_SetConfig+0xd4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d113      	bne.n	80034b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800349e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000

080034e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800352c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <TIM_OC3_SetConfig+0xd0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10d      	bne.n	800355e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800355c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <TIM_OC3_SetConfig+0xd0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800356c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40010000 	.word	0x40010000

080035b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a10      	ldr	r2, [pc, #64]	@ (8003654 <TIM_OC4_SetConfig+0x9c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d109      	bne.n	800362c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800361e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000

08003658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 030a 	bic.w	r3, r3, #10
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f023 0210 	bic.w	r2, r3, #16
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	031b      	lsls	r3, r3, #12
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	f043 0307 	orr.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	431a      	orrs	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e050      	b.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d013      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	@ (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a16      	ldr	r2, [pc, #88]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10c      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800386c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4313      	orrs	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e03d      	b.n	800394c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e042      	b.n	80039f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd ffa8 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	@ 0x24
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f973 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	@ 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d175      	bne.n	8003b04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_Transmit+0x2c>
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e06e      	b.n	8003b06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2221      	movs	r2, #33	@ 0x21
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a36:	f7fe f917 	bl	8001c68 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a50:	d108      	bne.n	8003a64 <HAL_UART_Transmit+0x6c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e003      	b.n	8003a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a6c:	e02e      	b.n	8003acc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2200      	movs	r2, #0
 8003a76:	2180      	movs	r1, #128	@ 0x80
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f848 	bl	8003b0e <UART_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e03a      	b.n	8003b06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e007      	b.n	8003abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	3301      	adds	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1cb      	bne.n	8003a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2140      	movs	r1, #64	@ 0x40
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f814 	bl	8003b0e <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e006      	b.n	8003b06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1e:	e03b      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b26:	d037      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe f89e 	bl	8001c68 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e03a      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d023      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b80      	cmp	r3, #128	@ 0x80
 8003b54:	d020      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b40      	cmp	r3, #64	@ 0x40
 8003b5a:	d01d      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d116      	bne.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f81d 	bl	8003bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e00f      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d0b4      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b095      	sub	sp, #84	@ 0x54
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3314      	adds	r3, #20
 8003c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d119      	bne.n	8003c6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c58:	61ba      	str	r2, [r7, #24]
 8003c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	613b      	str	r3, [r7, #16]
   return(result);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e5      	bne.n	8003c38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c7a:	bf00      	nop
 8003c7c:	3754      	adds	r7, #84	@ 0x54
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b0c0      	sub	sp, #256	@ 0x100
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	ea40 0301 	orr.w	r3, r0, r1
 8003cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ce0:	f021 010c 	bic.w	r1, r1, #12
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d02:	6999      	ldr	r1, [r3, #24]
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	ea40 0301 	orr.w	r3, r0, r1
 8003d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b8f      	ldr	r3, [pc, #572]	@ (8003f54 <UART_SetConfig+0x2cc>)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d005      	beq.n	8003d28 <UART_SetConfig+0xa0>
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8d      	ldr	r3, [pc, #564]	@ (8003f58 <UART_SetConfig+0x2d0>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d104      	bne.n	8003d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe ff32 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d30:	e003      	b.n	8003d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7fe ff19 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003d36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	f040 810c 	bne.w	8003f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d62:	415b      	adcs	r3, r3
 8003d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	eb12 0801 	adds.w	r8, r2, r1
 8003d70:	4629      	mov	r1, r5
 8003d72:	eb43 0901 	adc.w	r9, r3, r1
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8a:	4690      	mov	r8, r2
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	eb18 0303 	adds.w	r3, r8, r3
 8003d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d98:	462b      	mov	r3, r5
 8003d9a:	eb49 0303 	adc.w	r3, r9, r3
 8003d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003db6:	460b      	mov	r3, r1
 8003db8:	18db      	adds	r3, r3, r3
 8003dba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dcc:	f7fc fe42 	bl	8000a54 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b61      	ldr	r3, [pc, #388]	@ (8003f5c <UART_SetConfig+0x2d4>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011c      	lsls	r4, r3, #4
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003de8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e00:	4641      	mov	r1, r8
 8003e02:	eb12 0a01 	adds.w	sl, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0b01 	adc.w	fp, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e20:	4692      	mov	sl, r2
 8003e22:	469b      	mov	fp, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	eb1a 0303 	adds.w	r3, sl, r3
 8003e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	eb4b 0303 	adc.w	r3, fp, r3
 8003e34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	18db      	adds	r3, r3, r3
 8003e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e52:	4613      	mov	r3, r2
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e62:	f7fc fdf7 	bl	8000a54 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f5c <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2264      	movs	r2, #100	@ 0x64
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e82:	4b36      	ldr	r3, [pc, #216]	@ (8003f5c <UART_SetConfig+0x2d4>)
 8003e84:	fba3 2302 	umull	r2, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e90:	441c      	add	r4, r3
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003eac:	415b      	adcs	r3, r3
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f1e:	f7fc fd99 	bl	8000a54 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <UART_SetConfig+0x2d4>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	@ 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3332      	adds	r3, #50	@ 0x32
 8003f3a:	4a08      	ldr	r2, [pc, #32]	@ (8003f5c <UART_SetConfig+0x2d4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 0207 	and.w	r2, r3, #7
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4422      	add	r2, r4
 8003f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f50:	e106      	b.n	8004160 <UART_SetConfig+0x4d8>
 8003f52:	bf00      	nop
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	1891      	adds	r1, r2, r2
 8003f78:	6239      	str	r1, [r7, #32]
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f82:	4641      	mov	r1, r8
 8003f84:	1854      	adds	r4, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0501 	adc.w	r5, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00eb      	lsls	r3, r5, #3
 8003f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	18e3      	adds	r3, r4, r3
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fa8:	464b      	mov	r3, r9
 8003faa:	eb45 0303 	adc.w	r3, r5, r3
 8003fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fce:	4629      	mov	r1, r5
 8003fd0:	008b      	lsls	r3, r1, #2
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd8:	4621      	mov	r1, r4
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fe0:	f7fc fd38 	bl	8000a54 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b60      	ldr	r3, [pc, #384]	@ (800416c <UART_SetConfig+0x4e4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ffc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	61b9      	str	r1, [r7, #24]
 800400c:	415b      	adcs	r3, r3
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004014:	4641      	mov	r1, r8
 8004016:	1851      	adds	r1, r2, r1
 8004018:	6139      	str	r1, [r7, #16]
 800401a:	4649      	mov	r1, r9
 800401c:	414b      	adcs	r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4651      	mov	r1, sl
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4642      	mov	r2, r8
 8004042:	189b      	adds	r3, r3, r2
 8004044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004048:	464b      	mov	r3, r9
 800404a:	460a      	mov	r2, r1
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800405e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800407e:	f7fc fce9 	bl	8000a54 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b38      	ldr	r3, [pc, #224]	@ (800416c <UART_SetConfig+0x4e4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	@ 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	3332      	adds	r3, #50	@ 0x32
 800409c:	4a33      	ldr	r2, [pc, #204]	@ (800416c <UART_SetConfig+0x4e4>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a8:	441c      	add	r4, r3
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80040b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80040b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	415b      	adcs	r3, r3
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fa:	464b      	mov	r3, r9
 80040fc:	460a      	mov	r2, r1
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	663b      	str	r3, [r7, #96]	@ 0x60
 800410e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800412e:	f7fc fc91 	bl	8000a54 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <UART_SetConfig+0x4e4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	@ 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	@ 0x32
 800414a:	4a08      	ldr	r2, [pc, #32]	@ (800416c <UART_SetConfig+0x4e4>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4422      	add	r2, r4
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <std>:
 8004170:	2300      	movs	r3, #0
 8004172:	b510      	push	{r4, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	e9c0 3300 	strd	r3, r3, [r0]
 800417a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800417e:	6083      	str	r3, [r0, #8]
 8004180:	8181      	strh	r1, [r0, #12]
 8004182:	6643      	str	r3, [r0, #100]	@ 0x64
 8004184:	81c2      	strh	r2, [r0, #14]
 8004186:	6183      	str	r3, [r0, #24]
 8004188:	4619      	mov	r1, r3
 800418a:	2208      	movs	r2, #8
 800418c:	305c      	adds	r0, #92	@ 0x5c
 800418e:	f000 f9e7 	bl	8004560 <memset>
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <std+0x58>)
 8004194:	6263      	str	r3, [r4, #36]	@ 0x24
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <std+0x5c>)
 8004198:	62a3      	str	r3, [r4, #40]	@ 0x28
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <std+0x60>)
 800419c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <std+0x64>)
 80041a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <std+0x68>)
 80041a4:	6224      	str	r4, [r4, #32]
 80041a6:	429c      	cmp	r4, r3
 80041a8:	d006      	beq.n	80041b8 <std+0x48>
 80041aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041ae:	4294      	cmp	r4, r2
 80041b0:	d002      	beq.n	80041b8 <std+0x48>
 80041b2:	33d0      	adds	r3, #208	@ 0xd0
 80041b4:	429c      	cmp	r4, r3
 80041b6:	d105      	bne.n	80041c4 <std+0x54>
 80041b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c0:	f000 ba46 	b.w	8004650 <__retarget_lock_init_recursive>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	080043b1 	.word	0x080043b1
 80041cc:	080043d3 	.word	0x080043d3
 80041d0:	0800440b 	.word	0x0800440b
 80041d4:	0800442f 	.word	0x0800442f
 80041d8:	2000017c 	.word	0x2000017c

080041dc <stdio_exit_handler>:
 80041dc:	4a02      	ldr	r2, [pc, #8]	@ (80041e8 <stdio_exit_handler+0xc>)
 80041de:	4903      	ldr	r1, [pc, #12]	@ (80041ec <stdio_exit_handler+0x10>)
 80041e0:	4803      	ldr	r0, [pc, #12]	@ (80041f0 <stdio_exit_handler+0x14>)
 80041e2:	f000 b869 	b.w	80042b8 <_fwalk_sglue>
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	08004951 	.word	0x08004951
 80041f0:	2000001c 	.word	0x2000001c

080041f4 <cleanup_stdio>:
 80041f4:	6841      	ldr	r1, [r0, #4]
 80041f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <cleanup_stdio+0x34>)
 80041f8:	4299      	cmp	r1, r3
 80041fa:	b510      	push	{r4, lr}
 80041fc:	4604      	mov	r4, r0
 80041fe:	d001      	beq.n	8004204 <cleanup_stdio+0x10>
 8004200:	f000 fba6 	bl	8004950 <_fflush_r>
 8004204:	68a1      	ldr	r1, [r4, #8]
 8004206:	4b09      	ldr	r3, [pc, #36]	@ (800422c <cleanup_stdio+0x38>)
 8004208:	4299      	cmp	r1, r3
 800420a:	d002      	beq.n	8004212 <cleanup_stdio+0x1e>
 800420c:	4620      	mov	r0, r4
 800420e:	f000 fb9f 	bl	8004950 <_fflush_r>
 8004212:	68e1      	ldr	r1, [r4, #12]
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <cleanup_stdio+0x3c>)
 8004216:	4299      	cmp	r1, r3
 8004218:	d004      	beq.n	8004224 <cleanup_stdio+0x30>
 800421a:	4620      	mov	r0, r4
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004220:	f000 bb96 	b.w	8004950 <_fflush_r>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	bf00      	nop
 8004228:	2000017c 	.word	0x2000017c
 800422c:	200001e4 	.word	0x200001e4
 8004230:	2000024c 	.word	0x2000024c

08004234 <global_stdio_init.part.0>:
 8004234:	b510      	push	{r4, lr}
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <global_stdio_init.part.0+0x30>)
 8004238:	4c0b      	ldr	r4, [pc, #44]	@ (8004268 <global_stdio_init.part.0+0x34>)
 800423a:	4a0c      	ldr	r2, [pc, #48]	@ (800426c <global_stdio_init.part.0+0x38>)
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	4620      	mov	r0, r4
 8004240:	2200      	movs	r2, #0
 8004242:	2104      	movs	r1, #4
 8004244:	f7ff ff94 	bl	8004170 <std>
 8004248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800424c:	2201      	movs	r2, #1
 800424e:	2109      	movs	r1, #9
 8004250:	f7ff ff8e 	bl	8004170 <std>
 8004254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004258:	2202      	movs	r2, #2
 800425a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800425e:	2112      	movs	r1, #18
 8004260:	f7ff bf86 	b.w	8004170 <std>
 8004264:	200002b4 	.word	0x200002b4
 8004268:	2000017c 	.word	0x2000017c
 800426c:	080041dd 	.word	0x080041dd

08004270 <__sfp_lock_acquire>:
 8004270:	4801      	ldr	r0, [pc, #4]	@ (8004278 <__sfp_lock_acquire+0x8>)
 8004272:	f000 b9ee 	b.w	8004652 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	200002bd 	.word	0x200002bd

0800427c <__sfp_lock_release>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__sfp_lock_release+0x8>)
 800427e:	f000 b9e9 	b.w	8004654 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	200002bd 	.word	0x200002bd

08004288 <__sinit>:
 8004288:	b510      	push	{r4, lr}
 800428a:	4604      	mov	r4, r0
 800428c:	f7ff fff0 	bl	8004270 <__sfp_lock_acquire>
 8004290:	6a23      	ldr	r3, [r4, #32]
 8004292:	b11b      	cbz	r3, 800429c <__sinit+0x14>
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f7ff bff0 	b.w	800427c <__sfp_lock_release>
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <__sinit+0x28>)
 800429e:	6223      	str	r3, [r4, #32]
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <__sinit+0x2c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f5      	bne.n	8004294 <__sinit+0xc>
 80042a8:	f7ff ffc4 	bl	8004234 <global_stdio_init.part.0>
 80042ac:	e7f2      	b.n	8004294 <__sinit+0xc>
 80042ae:	bf00      	nop
 80042b0:	080041f5 	.word	0x080041f5
 80042b4:	200002b4 	.word	0x200002b4

080042b8 <_fwalk_sglue>:
 80042b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042bc:	4607      	mov	r7, r0
 80042be:	4688      	mov	r8, r1
 80042c0:	4614      	mov	r4, r2
 80042c2:	2600      	movs	r6, #0
 80042c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042c8:	f1b9 0901 	subs.w	r9, r9, #1
 80042cc:	d505      	bpl.n	80042da <_fwalk_sglue+0x22>
 80042ce:	6824      	ldr	r4, [r4, #0]
 80042d0:	2c00      	cmp	r4, #0
 80042d2:	d1f7      	bne.n	80042c4 <_fwalk_sglue+0xc>
 80042d4:	4630      	mov	r0, r6
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	89ab      	ldrh	r3, [r5, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d907      	bls.n	80042f0 <_fwalk_sglue+0x38>
 80042e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042e4:	3301      	adds	r3, #1
 80042e6:	d003      	beq.n	80042f0 <_fwalk_sglue+0x38>
 80042e8:	4629      	mov	r1, r5
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c0      	blx	r8
 80042ee:	4306      	orrs	r6, r0
 80042f0:	3568      	adds	r5, #104	@ 0x68
 80042f2:	e7e9      	b.n	80042c8 <_fwalk_sglue+0x10>

080042f4 <_puts_r>:
 80042f4:	6a03      	ldr	r3, [r0, #32]
 80042f6:	b570      	push	{r4, r5, r6, lr}
 80042f8:	6884      	ldr	r4, [r0, #8]
 80042fa:	4605      	mov	r5, r0
 80042fc:	460e      	mov	r6, r1
 80042fe:	b90b      	cbnz	r3, 8004304 <_puts_r+0x10>
 8004300:	f7ff ffc2 	bl	8004288 <__sinit>
 8004304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004306:	07db      	lsls	r3, r3, #31
 8004308:	d405      	bmi.n	8004316 <_puts_r+0x22>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	0598      	lsls	r0, r3, #22
 800430e:	d402      	bmi.n	8004316 <_puts_r+0x22>
 8004310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004312:	f000 f99e 	bl	8004652 <__retarget_lock_acquire_recursive>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	0719      	lsls	r1, r3, #28
 800431a:	d502      	bpl.n	8004322 <_puts_r+0x2e>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d135      	bne.n	800438e <_puts_r+0x9a>
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	f000 f8c5 	bl	80044b4 <__swsetup_r>
 800432a:	b380      	cbz	r0, 800438e <_puts_r+0x9a>
 800432c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004332:	07da      	lsls	r2, r3, #31
 8004334:	d405      	bmi.n	8004342 <_puts_r+0x4e>
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	059b      	lsls	r3, r3, #22
 800433a:	d402      	bmi.n	8004342 <_puts_r+0x4e>
 800433c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800433e:	f000 f989 	bl	8004654 <__retarget_lock_release_recursive>
 8004342:	4628      	mov	r0, r5
 8004344:	bd70      	pop	{r4, r5, r6, pc}
 8004346:	2b00      	cmp	r3, #0
 8004348:	da04      	bge.n	8004354 <_puts_r+0x60>
 800434a:	69a2      	ldr	r2, [r4, #24]
 800434c:	429a      	cmp	r2, r3
 800434e:	dc17      	bgt.n	8004380 <_puts_r+0x8c>
 8004350:	290a      	cmp	r1, #10
 8004352:	d015      	beq.n	8004380 <_puts_r+0x8c>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	6022      	str	r2, [r4, #0]
 800435a:	7019      	strb	r1, [r3, #0]
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004362:	3b01      	subs	r3, #1
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	2900      	cmp	r1, #0
 8004368:	d1ed      	bne.n	8004346 <_puts_r+0x52>
 800436a:	2b00      	cmp	r3, #0
 800436c:	da11      	bge.n	8004392 <_puts_r+0x9e>
 800436e:	4622      	mov	r2, r4
 8004370:	210a      	movs	r1, #10
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f85f 	bl	8004436 <__swbuf_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d0d7      	beq.n	800432c <_puts_r+0x38>
 800437c:	250a      	movs	r5, #10
 800437e:	e7d7      	b.n	8004330 <_puts_r+0x3c>
 8004380:	4622      	mov	r2, r4
 8004382:	4628      	mov	r0, r5
 8004384:	f000 f857 	bl	8004436 <__swbuf_r>
 8004388:	3001      	adds	r0, #1
 800438a:	d1e7      	bne.n	800435c <_puts_r+0x68>
 800438c:	e7ce      	b.n	800432c <_puts_r+0x38>
 800438e:	3e01      	subs	r6, #1
 8004390:	e7e4      	b.n	800435c <_puts_r+0x68>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	6022      	str	r2, [r4, #0]
 8004398:	220a      	movs	r2, #10
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e7ee      	b.n	800437c <_puts_r+0x88>
	...

080043a0 <puts>:
 80043a0:	4b02      	ldr	r3, [pc, #8]	@ (80043ac <puts+0xc>)
 80043a2:	4601      	mov	r1, r0
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f7ff bfa5 	b.w	80042f4 <_puts_r>
 80043aa:	bf00      	nop
 80043ac:	20000018 	.word	0x20000018

080043b0 <__sread>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	460c      	mov	r4, r1
 80043b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b8:	f000 f8fc 	bl	80045b4 <_read_r>
 80043bc:	2800      	cmp	r0, #0
 80043be:	bfab      	itete	ge
 80043c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043c2:	89a3      	ldrhlt	r3, [r4, #12]
 80043c4:	181b      	addge	r3, r3, r0
 80043c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043ca:	bfac      	ite	ge
 80043cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043ce:	81a3      	strhlt	r3, [r4, #12]
 80043d0:	bd10      	pop	{r4, pc}

080043d2 <__swrite>:
 80043d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d6:	461f      	mov	r7, r3
 80043d8:	898b      	ldrh	r3, [r1, #12]
 80043da:	05db      	lsls	r3, r3, #23
 80043dc:	4605      	mov	r5, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	4616      	mov	r6, r2
 80043e2:	d505      	bpl.n	80043f0 <__swrite+0x1e>
 80043e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e8:	2302      	movs	r3, #2
 80043ea:	2200      	movs	r2, #0
 80043ec:	f000 f8d0 	bl	8004590 <_lseek_r>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	4632      	mov	r2, r6
 80043fe:	463b      	mov	r3, r7
 8004400:	4628      	mov	r0, r5
 8004402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004406:	f000 b8e7 	b.w	80045d8 <_write_r>

0800440a <__sseek>:
 800440a:	b510      	push	{r4, lr}
 800440c:	460c      	mov	r4, r1
 800440e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004412:	f000 f8bd 	bl	8004590 <_lseek_r>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	bf15      	itete	ne
 800441c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800441e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004426:	81a3      	strheq	r3, [r4, #12]
 8004428:	bf18      	it	ne
 800442a:	81a3      	strhne	r3, [r4, #12]
 800442c:	bd10      	pop	{r4, pc}

0800442e <__sclose>:
 800442e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004432:	f000 b89d 	b.w	8004570 <_close_r>

08004436 <__swbuf_r>:
 8004436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004438:	460e      	mov	r6, r1
 800443a:	4614      	mov	r4, r2
 800443c:	4605      	mov	r5, r0
 800443e:	b118      	cbz	r0, 8004448 <__swbuf_r+0x12>
 8004440:	6a03      	ldr	r3, [r0, #32]
 8004442:	b90b      	cbnz	r3, 8004448 <__swbuf_r+0x12>
 8004444:	f7ff ff20 	bl	8004288 <__sinit>
 8004448:	69a3      	ldr	r3, [r4, #24]
 800444a:	60a3      	str	r3, [r4, #8]
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	071a      	lsls	r2, r3, #28
 8004450:	d501      	bpl.n	8004456 <__swbuf_r+0x20>
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	b943      	cbnz	r3, 8004468 <__swbuf_r+0x32>
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f82b 	bl	80044b4 <__swsetup_r>
 800445e:	b118      	cbz	r0, 8004468 <__swbuf_r+0x32>
 8004460:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004464:	4638      	mov	r0, r7
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	6922      	ldr	r2, [r4, #16]
 800446c:	1a98      	subs	r0, r3, r2
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	b2f6      	uxtb	r6, r6
 8004472:	4283      	cmp	r3, r0
 8004474:	4637      	mov	r7, r6
 8004476:	dc05      	bgt.n	8004484 <__swbuf_r+0x4e>
 8004478:	4621      	mov	r1, r4
 800447a:	4628      	mov	r0, r5
 800447c:	f000 fa68 	bl	8004950 <_fflush_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	d1ed      	bne.n	8004460 <__swbuf_r+0x2a>
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	3b01      	subs	r3, #1
 8004488:	60a3      	str	r3, [r4, #8]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	6022      	str	r2, [r4, #0]
 8004490:	701e      	strb	r6, [r3, #0]
 8004492:	6962      	ldr	r2, [r4, #20]
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	429a      	cmp	r2, r3
 8004498:	d004      	beq.n	80044a4 <__swbuf_r+0x6e>
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	07db      	lsls	r3, r3, #31
 800449e:	d5e1      	bpl.n	8004464 <__swbuf_r+0x2e>
 80044a0:	2e0a      	cmp	r6, #10
 80044a2:	d1df      	bne.n	8004464 <__swbuf_r+0x2e>
 80044a4:	4621      	mov	r1, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 fa52 	bl	8004950 <_fflush_r>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d0d9      	beq.n	8004464 <__swbuf_r+0x2e>
 80044b0:	e7d6      	b.n	8004460 <__swbuf_r+0x2a>
	...

080044b4 <__swsetup_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4b29      	ldr	r3, [pc, #164]	@ (800455c <__swsetup_r+0xa8>)
 80044b8:	4605      	mov	r5, r0
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	460c      	mov	r4, r1
 80044be:	b118      	cbz	r0, 80044c8 <__swsetup_r+0x14>
 80044c0:	6a03      	ldr	r3, [r0, #32]
 80044c2:	b90b      	cbnz	r3, 80044c8 <__swsetup_r+0x14>
 80044c4:	f7ff fee0 	bl	8004288 <__sinit>
 80044c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044cc:	0719      	lsls	r1, r3, #28
 80044ce:	d422      	bmi.n	8004516 <__swsetup_r+0x62>
 80044d0:	06da      	lsls	r2, r3, #27
 80044d2:	d407      	bmi.n	80044e4 <__swsetup_r+0x30>
 80044d4:	2209      	movs	r2, #9
 80044d6:	602a      	str	r2, [r5, #0]
 80044d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044e2:	e033      	b.n	800454c <__swsetup_r+0x98>
 80044e4:	0758      	lsls	r0, r3, #29
 80044e6:	d512      	bpl.n	800450e <__swsetup_r+0x5a>
 80044e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ea:	b141      	cbz	r1, 80044fe <__swsetup_r+0x4a>
 80044ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044f0:	4299      	cmp	r1, r3
 80044f2:	d002      	beq.n	80044fa <__swsetup_r+0x46>
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f8af 	bl	8004658 <_free_r>
 80044fa:	2300      	movs	r3, #0
 80044fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	2300      	movs	r3, #0
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	f043 0308 	orr.w	r3, r3, #8
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	b94b      	cbnz	r3, 800452e <__swsetup_r+0x7a>
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004524:	d003      	beq.n	800452e <__swsetup_r+0x7a>
 8004526:	4621      	mov	r1, r4
 8004528:	4628      	mov	r0, r5
 800452a:	f000 fa5f 	bl	80049ec <__smakebuf_r>
 800452e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004532:	f013 0201 	ands.w	r2, r3, #1
 8004536:	d00a      	beq.n	800454e <__swsetup_r+0x9a>
 8004538:	2200      	movs	r2, #0
 800453a:	60a2      	str	r2, [r4, #8]
 800453c:	6962      	ldr	r2, [r4, #20]
 800453e:	4252      	negs	r2, r2
 8004540:	61a2      	str	r2, [r4, #24]
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	b942      	cbnz	r2, 8004558 <__swsetup_r+0xa4>
 8004546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800454a:	d1c5      	bne.n	80044d8 <__swsetup_r+0x24>
 800454c:	bd38      	pop	{r3, r4, r5, pc}
 800454e:	0799      	lsls	r1, r3, #30
 8004550:	bf58      	it	pl
 8004552:	6962      	ldrpl	r2, [r4, #20]
 8004554:	60a2      	str	r2, [r4, #8]
 8004556:	e7f4      	b.n	8004542 <__swsetup_r+0x8e>
 8004558:	2000      	movs	r0, #0
 800455a:	e7f7      	b.n	800454c <__swsetup_r+0x98>
 800455c:	20000018 	.word	0x20000018

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <_close_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4d06      	ldr	r5, [pc, #24]	@ (800458c <_close_r+0x1c>)
 8004574:	2300      	movs	r3, #0
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	f7fd fa68 	bl	8001a50 <_close>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_close_r+0x1a>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_close_r+0x1a>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	200002b8 	.word	0x200002b8

08004590 <_lseek_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d07      	ldr	r5, [pc, #28]	@ (80045b0 <_lseek_r+0x20>)
 8004594:	4604      	mov	r4, r0
 8004596:	4608      	mov	r0, r1
 8004598:	4611      	mov	r1, r2
 800459a:	2200      	movs	r2, #0
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	f7fd fa7d 	bl	8001a9e <_lseek>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_lseek_r+0x1e>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_lseek_r+0x1e>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	200002b8 	.word	0x200002b8

080045b4 <_read_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4d07      	ldr	r5, [pc, #28]	@ (80045d4 <_read_r+0x20>)
 80045b8:	4604      	mov	r4, r0
 80045ba:	4608      	mov	r0, r1
 80045bc:	4611      	mov	r1, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	602a      	str	r2, [r5, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7fd fa0b 	bl	80019de <_read>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d102      	bne.n	80045d2 <_read_r+0x1e>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	b103      	cbz	r3, 80045d2 <_read_r+0x1e>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	200002b8 	.word	0x200002b8

080045d8 <_write_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4d07      	ldr	r5, [pc, #28]	@ (80045f8 <_write_r+0x20>)
 80045dc:	4604      	mov	r4, r0
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	2200      	movs	r2, #0
 80045e4:	602a      	str	r2, [r5, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7fd fa16 	bl	8001a18 <_write>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_write_r+0x1e>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_write_r+0x1e>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	200002b8 	.word	0x200002b8

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	@ (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000018 	.word	0x20000018

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4d0d      	ldr	r5, [pc, #52]	@ (8004640 <__libc_init_array+0x38>)
 800460c:	4c0d      	ldr	r4, [pc, #52]	@ (8004644 <__libc_init_array+0x3c>)
 800460e:	1b64      	subs	r4, r4, r5
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	2600      	movs	r6, #0
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	4d0b      	ldr	r5, [pc, #44]	@ (8004648 <__libc_init_array+0x40>)
 800461a:	4c0c      	ldr	r4, [pc, #48]	@ (800464c <__libc_init_array+0x44>)
 800461c:	f000 fbd2 	bl	8004dc4 <_init>
 8004620:	1b64      	subs	r4, r4, r5
 8004622:	10a4      	asrs	r4, r4, #2
 8004624:	2600      	movs	r6, #0
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08004e44 	.word	0x08004e44
 8004644:	08004e44 	.word	0x08004e44
 8004648:	08004e44 	.word	0x08004e44
 800464c:	08004e48 	.word	0x08004e48

08004650 <__retarget_lock_init_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_acquire_recursive>:
 8004652:	4770      	bx	lr

08004654 <__retarget_lock_release_recursive>:
 8004654:	4770      	bx	lr
	...

08004658 <_free_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4605      	mov	r5, r0
 800465c:	2900      	cmp	r1, #0
 800465e:	d041      	beq.n	80046e4 <_free_r+0x8c>
 8004660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004664:	1f0c      	subs	r4, r1, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfb8      	it	lt
 800466a:	18e4      	addlt	r4, r4, r3
 800466c:	f000 f8e0 	bl	8004830 <__malloc_lock>
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <_free_r+0x90>)
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	b933      	cbnz	r3, 8004684 <_free_r+0x2c>
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	6014      	str	r4, [r2, #0]
 800467a:	4628      	mov	r0, r5
 800467c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004680:	f000 b8dc 	b.w	800483c <__malloc_unlock>
 8004684:	42a3      	cmp	r3, r4
 8004686:	d908      	bls.n	800469a <_free_r+0x42>
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	1821      	adds	r1, r4, r0
 800468c:	428b      	cmp	r3, r1
 800468e:	bf01      	itttt	eq
 8004690:	6819      	ldreq	r1, [r3, #0]
 8004692:	685b      	ldreq	r3, [r3, #4]
 8004694:	1809      	addeq	r1, r1, r0
 8004696:	6021      	streq	r1, [r4, #0]
 8004698:	e7ed      	b.n	8004676 <_free_r+0x1e>
 800469a:	461a      	mov	r2, r3
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b10b      	cbz	r3, 80046a4 <_free_r+0x4c>
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	d9fa      	bls.n	800469a <_free_r+0x42>
 80046a4:	6811      	ldr	r1, [r2, #0]
 80046a6:	1850      	adds	r0, r2, r1
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d10b      	bne.n	80046c4 <_free_r+0x6c>
 80046ac:	6820      	ldr	r0, [r4, #0]
 80046ae:	4401      	add	r1, r0
 80046b0:	1850      	adds	r0, r2, r1
 80046b2:	4283      	cmp	r3, r0
 80046b4:	6011      	str	r1, [r2, #0]
 80046b6:	d1e0      	bne.n	800467a <_free_r+0x22>
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	6053      	str	r3, [r2, #4]
 80046be:	4408      	add	r0, r1
 80046c0:	6010      	str	r0, [r2, #0]
 80046c2:	e7da      	b.n	800467a <_free_r+0x22>
 80046c4:	d902      	bls.n	80046cc <_free_r+0x74>
 80046c6:	230c      	movs	r3, #12
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	e7d6      	b.n	800467a <_free_r+0x22>
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	1821      	adds	r1, r4, r0
 80046d0:	428b      	cmp	r3, r1
 80046d2:	bf04      	itt	eq
 80046d4:	6819      	ldreq	r1, [r3, #0]
 80046d6:	685b      	ldreq	r3, [r3, #4]
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	bf04      	itt	eq
 80046dc:	1809      	addeq	r1, r1, r0
 80046de:	6021      	streq	r1, [r4, #0]
 80046e0:	6054      	str	r4, [r2, #4]
 80046e2:	e7ca      	b.n	800467a <_free_r+0x22>
 80046e4:	bd38      	pop	{r3, r4, r5, pc}
 80046e6:	bf00      	nop
 80046e8:	200002c4 	.word	0x200002c4

080046ec <sbrk_aligned>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4e0f      	ldr	r6, [pc, #60]	@ (800472c <sbrk_aligned+0x40>)
 80046f0:	460c      	mov	r4, r1
 80046f2:	6831      	ldr	r1, [r6, #0]
 80046f4:	4605      	mov	r5, r0
 80046f6:	b911      	cbnz	r1, 80046fe <sbrk_aligned+0x12>
 80046f8:	f000 f9d6 	bl	8004aa8 <_sbrk_r>
 80046fc:	6030      	str	r0, [r6, #0]
 80046fe:	4621      	mov	r1, r4
 8004700:	4628      	mov	r0, r5
 8004702:	f000 f9d1 	bl	8004aa8 <_sbrk_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	d103      	bne.n	8004712 <sbrk_aligned+0x26>
 800470a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800470e:	4620      	mov	r0, r4
 8004710:	bd70      	pop	{r4, r5, r6, pc}
 8004712:	1cc4      	adds	r4, r0, #3
 8004714:	f024 0403 	bic.w	r4, r4, #3
 8004718:	42a0      	cmp	r0, r4
 800471a:	d0f8      	beq.n	800470e <sbrk_aligned+0x22>
 800471c:	1a21      	subs	r1, r4, r0
 800471e:	4628      	mov	r0, r5
 8004720:	f000 f9c2 	bl	8004aa8 <_sbrk_r>
 8004724:	3001      	adds	r0, #1
 8004726:	d1f2      	bne.n	800470e <sbrk_aligned+0x22>
 8004728:	e7ef      	b.n	800470a <sbrk_aligned+0x1e>
 800472a:	bf00      	nop
 800472c:	200002c0 	.word	0x200002c0

08004730 <_malloc_r>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	1ccd      	adds	r5, r1, #3
 8004736:	f025 0503 	bic.w	r5, r5, #3
 800473a:	3508      	adds	r5, #8
 800473c:	2d0c      	cmp	r5, #12
 800473e:	bf38      	it	cc
 8004740:	250c      	movcc	r5, #12
 8004742:	2d00      	cmp	r5, #0
 8004744:	4606      	mov	r6, r0
 8004746:	db01      	blt.n	800474c <_malloc_r+0x1c>
 8004748:	42a9      	cmp	r1, r5
 800474a:	d904      	bls.n	8004756 <_malloc_r+0x26>
 800474c:	230c      	movs	r3, #12
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	2000      	movs	r0, #0
 8004752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800482c <_malloc_r+0xfc>
 800475a:	f000 f869 	bl	8004830 <__malloc_lock>
 800475e:	f8d8 3000 	ldr.w	r3, [r8]
 8004762:	461c      	mov	r4, r3
 8004764:	bb44      	cbnz	r4, 80047b8 <_malloc_r+0x88>
 8004766:	4629      	mov	r1, r5
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff ffbf 	bl	80046ec <sbrk_aligned>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	4604      	mov	r4, r0
 8004772:	d158      	bne.n	8004826 <_malloc_r+0xf6>
 8004774:	f8d8 4000 	ldr.w	r4, [r8]
 8004778:	4627      	mov	r7, r4
 800477a:	2f00      	cmp	r7, #0
 800477c:	d143      	bne.n	8004806 <_malloc_r+0xd6>
 800477e:	2c00      	cmp	r4, #0
 8004780:	d04b      	beq.n	800481a <_malloc_r+0xea>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4639      	mov	r1, r7
 8004786:	4630      	mov	r0, r6
 8004788:	eb04 0903 	add.w	r9, r4, r3
 800478c:	f000 f98c 	bl	8004aa8 <_sbrk_r>
 8004790:	4581      	cmp	r9, r0
 8004792:	d142      	bne.n	800481a <_malloc_r+0xea>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	1a6d      	subs	r5, r5, r1
 8004798:	4629      	mov	r1, r5
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff ffa6 	bl	80046ec <sbrk_aligned>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d03a      	beq.n	800481a <_malloc_r+0xea>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	442b      	add	r3, r5
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	f8d8 3000 	ldr.w	r3, [r8]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	bb62      	cbnz	r2, 800480c <_malloc_r+0xdc>
 80047b2:	f8c8 7000 	str.w	r7, [r8]
 80047b6:	e00f      	b.n	80047d8 <_malloc_r+0xa8>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	1b52      	subs	r2, r2, r5
 80047bc:	d420      	bmi.n	8004800 <_malloc_r+0xd0>
 80047be:	2a0b      	cmp	r2, #11
 80047c0:	d917      	bls.n	80047f2 <_malloc_r+0xc2>
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	6025      	str	r5, [r4, #0]
 80047c8:	bf18      	it	ne
 80047ca:	6059      	strne	r1, [r3, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	bf08      	it	eq
 80047d0:	f8c8 1000 	streq.w	r1, [r8]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 f82f 	bl	800483c <__malloc_unlock>
 80047de:	f104 000b 	add.w	r0, r4, #11
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	f020 0007 	bic.w	r0, r0, #7
 80047e8:	1ac2      	subs	r2, r0, r3
 80047ea:	bf1c      	itt	ne
 80047ec:	1a1b      	subne	r3, r3, r0
 80047ee:	50a3      	strne	r3, [r4, r2]
 80047f0:	e7af      	b.n	8004752 <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	f8c8 2000 	streq.w	r2, [r8]
 80047fc:	605a      	strne	r2, [r3, #4]
 80047fe:	e7eb      	b.n	80047d8 <_malloc_r+0xa8>
 8004800:	4623      	mov	r3, r4
 8004802:	6864      	ldr	r4, [r4, #4]
 8004804:	e7ae      	b.n	8004764 <_malloc_r+0x34>
 8004806:	463c      	mov	r4, r7
 8004808:	687f      	ldr	r7, [r7, #4]
 800480a:	e7b6      	b.n	800477a <_malloc_r+0x4a>
 800480c:	461a      	mov	r2, r3
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	42a3      	cmp	r3, r4
 8004812:	d1fb      	bne.n	800480c <_malloc_r+0xdc>
 8004814:	2300      	movs	r3, #0
 8004816:	6053      	str	r3, [r2, #4]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa8>
 800481a:	230c      	movs	r3, #12
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f80c 	bl	800483c <__malloc_unlock>
 8004824:	e794      	b.n	8004750 <_malloc_r+0x20>
 8004826:	6005      	str	r5, [r0, #0]
 8004828:	e7d6      	b.n	80047d8 <_malloc_r+0xa8>
 800482a:	bf00      	nop
 800482c:	200002c4 	.word	0x200002c4

08004830 <__malloc_lock>:
 8004830:	4801      	ldr	r0, [pc, #4]	@ (8004838 <__malloc_lock+0x8>)
 8004832:	f7ff bf0e 	b.w	8004652 <__retarget_lock_acquire_recursive>
 8004836:	bf00      	nop
 8004838:	200002bc 	.word	0x200002bc

0800483c <__malloc_unlock>:
 800483c:	4801      	ldr	r0, [pc, #4]	@ (8004844 <__malloc_unlock+0x8>)
 800483e:	f7ff bf09 	b.w	8004654 <__retarget_lock_release_recursive>
 8004842:	bf00      	nop
 8004844:	200002bc 	.word	0x200002bc

08004848 <__sflush_r>:
 8004848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	0716      	lsls	r6, r2, #28
 8004852:	4605      	mov	r5, r0
 8004854:	460c      	mov	r4, r1
 8004856:	d454      	bmi.n	8004902 <__sflush_r+0xba>
 8004858:	684b      	ldr	r3, [r1, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	dc02      	bgt.n	8004864 <__sflush_r+0x1c>
 800485e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	dd48      	ble.n	80048f6 <__sflush_r+0xae>
 8004864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004866:	2e00      	cmp	r6, #0
 8004868:	d045      	beq.n	80048f6 <__sflush_r+0xae>
 800486a:	2300      	movs	r3, #0
 800486c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004870:	682f      	ldr	r7, [r5, #0]
 8004872:	6a21      	ldr	r1, [r4, #32]
 8004874:	602b      	str	r3, [r5, #0]
 8004876:	d030      	beq.n	80048da <__sflush_r+0x92>
 8004878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	0759      	lsls	r1, r3, #29
 800487e:	d505      	bpl.n	800488c <__sflush_r+0x44>
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004886:	b10b      	cbz	r3, 800488c <__sflush_r+0x44>
 8004888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004890:	6a21      	ldr	r1, [r4, #32]
 8004892:	4628      	mov	r0, r5
 8004894:	47b0      	blx	r6
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	d106      	bne.n	80048aa <__sflush_r+0x62>
 800489c:	6829      	ldr	r1, [r5, #0]
 800489e:	291d      	cmp	r1, #29
 80048a0:	d82b      	bhi.n	80048fa <__sflush_r+0xb2>
 80048a2:	4a2a      	ldr	r2, [pc, #168]	@ (800494c <__sflush_r+0x104>)
 80048a4:	40ca      	lsrs	r2, r1
 80048a6:	07d6      	lsls	r6, r2, #31
 80048a8:	d527      	bpl.n	80048fa <__sflush_r+0xb2>
 80048aa:	2200      	movs	r2, #0
 80048ac:	6062      	str	r2, [r4, #4]
 80048ae:	04d9      	lsls	r1, r3, #19
 80048b0:	6922      	ldr	r2, [r4, #16]
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	d504      	bpl.n	80048c0 <__sflush_r+0x78>
 80048b6:	1c42      	adds	r2, r0, #1
 80048b8:	d101      	bne.n	80048be <__sflush_r+0x76>
 80048ba:	682b      	ldr	r3, [r5, #0]
 80048bc:	b903      	cbnz	r3, 80048c0 <__sflush_r+0x78>
 80048be:	6560      	str	r0, [r4, #84]	@ 0x54
 80048c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048c2:	602f      	str	r7, [r5, #0]
 80048c4:	b1b9      	cbz	r1, 80048f6 <__sflush_r+0xae>
 80048c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048ca:	4299      	cmp	r1, r3
 80048cc:	d002      	beq.n	80048d4 <__sflush_r+0x8c>
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7ff fec2 	bl	8004658 <_free_r>
 80048d4:	2300      	movs	r3, #0
 80048d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80048d8:	e00d      	b.n	80048f6 <__sflush_r+0xae>
 80048da:	2301      	movs	r3, #1
 80048dc:	4628      	mov	r0, r5
 80048de:	47b0      	blx	r6
 80048e0:	4602      	mov	r2, r0
 80048e2:	1c50      	adds	r0, r2, #1
 80048e4:	d1c9      	bne.n	800487a <__sflush_r+0x32>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0c6      	beq.n	800487a <__sflush_r+0x32>
 80048ec:	2b1d      	cmp	r3, #29
 80048ee:	d001      	beq.n	80048f4 <__sflush_r+0xac>
 80048f0:	2b16      	cmp	r3, #22
 80048f2:	d11e      	bne.n	8004932 <__sflush_r+0xea>
 80048f4:	602f      	str	r7, [r5, #0]
 80048f6:	2000      	movs	r0, #0
 80048f8:	e022      	b.n	8004940 <__sflush_r+0xf8>
 80048fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048fe:	b21b      	sxth	r3, r3
 8004900:	e01b      	b.n	800493a <__sflush_r+0xf2>
 8004902:	690f      	ldr	r7, [r1, #16]
 8004904:	2f00      	cmp	r7, #0
 8004906:	d0f6      	beq.n	80048f6 <__sflush_r+0xae>
 8004908:	0793      	lsls	r3, r2, #30
 800490a:	680e      	ldr	r6, [r1, #0]
 800490c:	bf08      	it	eq
 800490e:	694b      	ldreq	r3, [r1, #20]
 8004910:	600f      	str	r7, [r1, #0]
 8004912:	bf18      	it	ne
 8004914:	2300      	movne	r3, #0
 8004916:	eba6 0807 	sub.w	r8, r6, r7
 800491a:	608b      	str	r3, [r1, #8]
 800491c:	f1b8 0f00 	cmp.w	r8, #0
 8004920:	dde9      	ble.n	80048f6 <__sflush_r+0xae>
 8004922:	6a21      	ldr	r1, [r4, #32]
 8004924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004926:	4643      	mov	r3, r8
 8004928:	463a      	mov	r2, r7
 800492a:	4628      	mov	r0, r5
 800492c:	47b0      	blx	r6
 800492e:	2800      	cmp	r0, #0
 8004930:	dc08      	bgt.n	8004944 <__sflush_r+0xfc>
 8004932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004944:	4407      	add	r7, r0
 8004946:	eba8 0800 	sub.w	r8, r8, r0
 800494a:	e7e7      	b.n	800491c <__sflush_r+0xd4>
 800494c:	20400001 	.word	0x20400001

08004950 <_fflush_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	690b      	ldr	r3, [r1, #16]
 8004954:	4605      	mov	r5, r0
 8004956:	460c      	mov	r4, r1
 8004958:	b913      	cbnz	r3, 8004960 <_fflush_r+0x10>
 800495a:	2500      	movs	r5, #0
 800495c:	4628      	mov	r0, r5
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	b118      	cbz	r0, 800496a <_fflush_r+0x1a>
 8004962:	6a03      	ldr	r3, [r0, #32]
 8004964:	b90b      	cbnz	r3, 800496a <_fflush_r+0x1a>
 8004966:	f7ff fc8f 	bl	8004288 <__sinit>
 800496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f3      	beq.n	800495a <_fflush_r+0xa>
 8004972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004974:	07d0      	lsls	r0, r2, #31
 8004976:	d404      	bmi.n	8004982 <_fflush_r+0x32>
 8004978:	0599      	lsls	r1, r3, #22
 800497a:	d402      	bmi.n	8004982 <_fflush_r+0x32>
 800497c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800497e:	f7ff fe68 	bl	8004652 <__retarget_lock_acquire_recursive>
 8004982:	4628      	mov	r0, r5
 8004984:	4621      	mov	r1, r4
 8004986:	f7ff ff5f 	bl	8004848 <__sflush_r>
 800498a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800498c:	07da      	lsls	r2, r3, #31
 800498e:	4605      	mov	r5, r0
 8004990:	d4e4      	bmi.n	800495c <_fflush_r+0xc>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	059b      	lsls	r3, r3, #22
 8004996:	d4e1      	bmi.n	800495c <_fflush_r+0xc>
 8004998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800499a:	f7ff fe5b 	bl	8004654 <__retarget_lock_release_recursive>
 800499e:	e7dd      	b.n	800495c <_fflush_r+0xc>

080049a0 <__swhatbuf_r>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	460c      	mov	r4, r1
 80049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a8:	2900      	cmp	r1, #0
 80049aa:	b096      	sub	sp, #88	@ 0x58
 80049ac:	4615      	mov	r5, r2
 80049ae:	461e      	mov	r6, r3
 80049b0:	da0d      	bge.n	80049ce <__swhatbuf_r+0x2e>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	bf14      	ite	ne
 80049be:	2340      	movne	r3, #64	@ 0x40
 80049c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80049c4:	2000      	movs	r0, #0
 80049c6:	6031      	str	r1, [r6, #0]
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	b016      	add	sp, #88	@ 0x58
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	466a      	mov	r2, sp
 80049d0:	f000 f848 	bl	8004a64 <_fstat_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	dbec      	blt.n	80049b2 <__swhatbuf_r+0x12>
 80049d8:	9901      	ldr	r1, [sp, #4]
 80049da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049e2:	4259      	negs	r1, r3
 80049e4:	4159      	adcs	r1, r3
 80049e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ea:	e7eb      	b.n	80049c4 <__swhatbuf_r+0x24>

080049ec <__smakebuf_r>:
 80049ec:	898b      	ldrh	r3, [r1, #12]
 80049ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049f0:	079d      	lsls	r5, r3, #30
 80049f2:	4606      	mov	r6, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	d507      	bpl.n	8004a08 <__smakebuf_r+0x1c>
 80049f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	2301      	movs	r3, #1
 8004a02:	6163      	str	r3, [r4, #20]
 8004a04:	b003      	add	sp, #12
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a08:	ab01      	add	r3, sp, #4
 8004a0a:	466a      	mov	r2, sp
 8004a0c:	f7ff ffc8 	bl	80049a0 <__swhatbuf_r>
 8004a10:	9f00      	ldr	r7, [sp, #0]
 8004a12:	4605      	mov	r5, r0
 8004a14:	4639      	mov	r1, r7
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7ff fe8a 	bl	8004730 <_malloc_r>
 8004a1c:	b948      	cbnz	r0, 8004a32 <__smakebuf_r+0x46>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	059a      	lsls	r2, r3, #22
 8004a24:	d4ee      	bmi.n	8004a04 <__smakebuf_r+0x18>
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	f043 0302 	orr.w	r3, r3, #2
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	e7e2      	b.n	80049f8 <__smakebuf_r+0xc>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	6020      	str	r0, [r4, #0]
 8004a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	9b01      	ldr	r3, [sp, #4]
 8004a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a42:	b15b      	cbz	r3, 8004a5c <__smakebuf_r+0x70>
 8004a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f81d 	bl	8004a88 <_isatty_r>
 8004a4e:	b128      	cbz	r0, 8004a5c <__smakebuf_r+0x70>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	431d      	orrs	r5, r3
 8004a60:	81a5      	strh	r5, [r4, #12]
 8004a62:	e7cf      	b.n	8004a04 <__smakebuf_r+0x18>

08004a64 <_fstat_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4d07      	ldr	r5, [pc, #28]	@ (8004a84 <_fstat_r+0x20>)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	f7fc fff9 	bl	8001a68 <_fstat>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d102      	bne.n	8004a80 <_fstat_r+0x1c>
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	b103      	cbz	r3, 8004a80 <_fstat_r+0x1c>
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	bd38      	pop	{r3, r4, r5, pc}
 8004a82:	bf00      	nop
 8004a84:	200002b8 	.word	0x200002b8

08004a88 <_isatty_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d06      	ldr	r5, [pc, #24]	@ (8004aa4 <_isatty_r+0x1c>)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	f7fc fff8 	bl	8001a88 <_isatty>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_isatty_r+0x1a>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_isatty_r+0x1a>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	200002b8 	.word	0x200002b8

08004aa8 <_sbrk_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d06      	ldr	r5, [pc, #24]	@ (8004ac4 <_sbrk_r+0x1c>)
 8004aac:	2300      	movs	r3, #0
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fd f800 	bl	8001ab8 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_sbrk_r+0x1a>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_sbrk_r+0x1a>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	200002b8 	.word	0x200002b8

08004ac8 <atan2f>:
 8004ac8:	f000 b800 	b.w	8004acc <__ieee754_atan2f>

08004acc <__ieee754_atan2f>:
 8004acc:	ee10 2a90 	vmov	r2, s1
 8004ad0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8004ad4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	eef0 7a40 	vmov.f32	s15, s0
 8004ade:	d806      	bhi.n	8004aee <__ieee754_atan2f+0x22>
 8004ae0:	ee10 0a10 	vmov	r0, s0
 8004ae4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004ae8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004aec:	d904      	bls.n	8004af8 <__ieee754_atan2f+0x2c>
 8004aee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004af2:	eeb0 0a67 	vmov.f32	s0, s15
 8004af6:	bd10      	pop	{r4, pc}
 8004af8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8004afc:	d103      	bne.n	8004b06 <__ieee754_atan2f+0x3a>
 8004afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b02:	f000 b883 	b.w	8004c0c <atanf>
 8004b06:	1794      	asrs	r4, r2, #30
 8004b08:	f004 0402 	and.w	r4, r4, #2
 8004b0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004b10:	b943      	cbnz	r3, 8004b24 <__ieee754_atan2f+0x58>
 8004b12:	2c02      	cmp	r4, #2
 8004b14:	d05e      	beq.n	8004bd4 <__ieee754_atan2f+0x108>
 8004b16:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004be8 <__ieee754_atan2f+0x11c>
 8004b1a:	2c03      	cmp	r4, #3
 8004b1c:	bf08      	it	eq
 8004b1e:	eef0 7a47 	vmoveq.f32	s15, s14
 8004b22:	e7e6      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004b24:	b941      	cbnz	r1, 8004b38 <__ieee754_atan2f+0x6c>
 8004b26:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004bec <__ieee754_atan2f+0x120>
 8004b2a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004bf0 <__ieee754_atan2f+0x124>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	bfa8      	it	ge
 8004b32:	eef0 7a47 	vmovge.f32	s15, s14
 8004b36:	e7dc      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004b38:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004b3c:	d110      	bne.n	8004b60 <__ieee754_atan2f+0x94>
 8004b3e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004b42:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8004b46:	d107      	bne.n	8004b58 <__ieee754_atan2f+0x8c>
 8004b48:	2c02      	cmp	r4, #2
 8004b4a:	d846      	bhi.n	8004bda <__ieee754_atan2f+0x10e>
 8004b4c:	4b29      	ldr	r3, [pc, #164]	@ (8004bf4 <__ieee754_atan2f+0x128>)
 8004b4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004b52:	edd3 7a00 	vldr	s15, [r3]
 8004b56:	e7cc      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004b58:	2c02      	cmp	r4, #2
 8004b5a:	d841      	bhi.n	8004be0 <__ieee754_atan2f+0x114>
 8004b5c:	4b26      	ldr	r3, [pc, #152]	@ (8004bf8 <__ieee754_atan2f+0x12c>)
 8004b5e:	e7f6      	b.n	8004b4e <__ieee754_atan2f+0x82>
 8004b60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004b64:	d0df      	beq.n	8004b26 <__ieee754_atan2f+0x5a>
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8004b6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8004b70:	da1a      	bge.n	8004ba8 <__ieee754_atan2f+0xdc>
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	da01      	bge.n	8004b7a <__ieee754_atan2f+0xae>
 8004b76:	313c      	adds	r1, #60	@ 0x3c
 8004b78:	db19      	blt.n	8004bae <__ieee754_atan2f+0xe2>
 8004b7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8004b7e:	f000 f919 	bl	8004db4 <fabsf>
 8004b82:	f000 f843 	bl	8004c0c <atanf>
 8004b86:	eef0 7a40 	vmov.f32	s15, s0
 8004b8a:	2c01      	cmp	r4, #1
 8004b8c:	d012      	beq.n	8004bb4 <__ieee754_atan2f+0xe8>
 8004b8e:	2c02      	cmp	r4, #2
 8004b90:	d017      	beq.n	8004bc2 <__ieee754_atan2f+0xf6>
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d0ad      	beq.n	8004af2 <__ieee754_atan2f+0x26>
 8004b96:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004bfc <__ieee754_atan2f+0x130>
 8004b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b9e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004c00 <__ieee754_atan2f+0x134>
 8004ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ba6:	e7a4      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004ba8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8004bf0 <__ieee754_atan2f+0x124>
 8004bac:	e7ed      	b.n	8004b8a <__ieee754_atan2f+0xbe>
 8004bae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004c04 <__ieee754_atan2f+0x138>
 8004bb2:	e7ea      	b.n	8004b8a <__ieee754_atan2f+0xbe>
 8004bb4:	ee17 3a90 	vmov	r3, s15
 8004bb8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	e797      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004bc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004bfc <__ieee754_atan2f+0x130>
 8004bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004c00 <__ieee754_atan2f+0x134>
 8004bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd2:	e78e      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004bd4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8004c00 <__ieee754_atan2f+0x134>
 8004bd8:	e78b      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004bda:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8004c08 <__ieee754_atan2f+0x13c>
 8004bde:	e788      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004be0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004c04 <__ieee754_atan2f+0x138>
 8004be4:	e785      	b.n	8004af2 <__ieee754_atan2f+0x26>
 8004be6:	bf00      	nop
 8004be8:	c0490fdb 	.word	0xc0490fdb
 8004bec:	bfc90fdb 	.word	0xbfc90fdb
 8004bf0:	3fc90fdb 	.word	0x3fc90fdb
 8004bf4:	08004e10 	.word	0x08004e10
 8004bf8:	08004e04 	.word	0x08004e04
 8004bfc:	33bbbd2e 	.word	0x33bbbd2e
 8004c00:	40490fdb 	.word	0x40490fdb
 8004c04:	00000000 	.word	0x00000000
 8004c08:	3f490fdb 	.word	0x3f490fdb

08004c0c <atanf>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	ee10 5a10 	vmov	r5, s0
 8004c12:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8004c16:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8004c1a:	eef0 7a40 	vmov.f32	s15, s0
 8004c1e:	d310      	bcc.n	8004c42 <atanf+0x36>
 8004c20:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8004c24:	d904      	bls.n	8004c30 <atanf+0x24>
 8004c26:	ee70 7a00 	vadd.f32	s15, s0, s0
 8004c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8004d68 <atanf+0x15c>
 8004c34:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004d6c <atanf+0x160>
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	bfc8      	it	gt
 8004c3c:	eef0 7a47 	vmovgt.f32	s15, s14
 8004c40:	e7f3      	b.n	8004c2a <atanf+0x1e>
 8004c42:	4b4b      	ldr	r3, [pc, #300]	@ (8004d70 <atanf+0x164>)
 8004c44:	429c      	cmp	r4, r3
 8004c46:	d810      	bhi.n	8004c6a <atanf+0x5e>
 8004c48:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8004c4c:	d20a      	bcs.n	8004c64 <atanf+0x58>
 8004c4e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004d74 <atanf+0x168>
 8004c52:	ee30 7a07 	vadd.f32	s14, s0, s14
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	dce2      	bgt.n	8004c2a <atanf+0x1e>
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c68:	e013      	b.n	8004c92 <atanf+0x86>
 8004c6a:	f000 f8a3 	bl	8004db4 <fabsf>
 8004c6e:	4b42      	ldr	r3, [pc, #264]	@ (8004d78 <atanf+0x16c>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	d84f      	bhi.n	8004d14 <atanf+0x108>
 8004c74:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d841      	bhi.n	8004d00 <atanf+0xf4>
 8004c7c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8004c80:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004c84:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004c88:	2300      	movs	r3, #0
 8004c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004c8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004c98:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004d7c <atanf+0x170>
 8004c9c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8004d80 <atanf+0x174>
 8004ca0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8004d84 <atanf+0x178>
 8004ca4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8004ca8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8004cac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004d88 <atanf+0x17c>
 8004cb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004cb4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8004d8c <atanf+0x180>
 8004cb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004cbc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004d90 <atanf+0x184>
 8004cc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004cc4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8004d94 <atanf+0x188>
 8004cc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004ccc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004d98 <atanf+0x18c>
 8004cd0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8004cd4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004d9c <atanf+0x190>
 8004cd8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004cdc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8004da0 <atanf+0x194>
 8004ce0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004ce4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004da4 <atanf+0x198>
 8004ce8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004cec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004cf0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004cf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cf8:	d121      	bne.n	8004d3e <atanf+0x132>
 8004cfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cfe:	e794      	b.n	8004c2a <atanf+0x1e>
 8004d00:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004d04:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004d08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004d12:	e7be      	b.n	8004c92 <atanf+0x86>
 8004d14:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <atanf+0x19c>)
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d80b      	bhi.n	8004d32 <atanf+0x126>
 8004d1a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8004d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d22:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004d26:	2302      	movs	r3, #2
 8004d28:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d30:	e7af      	b.n	8004c92 <atanf+0x86>
 8004d32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004d36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e7a9      	b.n	8004c92 <atanf+0x86>
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <atanf+0x1a0>)
 8004d40:	491b      	ldr	r1, [pc, #108]	@ (8004db0 <atanf+0x1a4>)
 8004d42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004d46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004d4a:	edd3 6a00 	vldr	s13, [r3]
 8004d4e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d58:	edd2 7a00 	vldr	s15, [r2]
 8004d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d60:	bfb8      	it	lt
 8004d62:	eef1 7a67 	vneglt.f32	s15, s15
 8004d66:	e760      	b.n	8004c2a <atanf+0x1e>
 8004d68:	bfc90fdb 	.word	0xbfc90fdb
 8004d6c:	3fc90fdb 	.word	0x3fc90fdb
 8004d70:	3edfffff 	.word	0x3edfffff
 8004d74:	7149f2ca 	.word	0x7149f2ca
 8004d78:	3f97ffff 	.word	0x3f97ffff
 8004d7c:	3c8569d7 	.word	0x3c8569d7
 8004d80:	3d4bda59 	.word	0x3d4bda59
 8004d84:	bd6ef16b 	.word	0xbd6ef16b
 8004d88:	3d886b35 	.word	0x3d886b35
 8004d8c:	3dba2e6e 	.word	0x3dba2e6e
 8004d90:	3e124925 	.word	0x3e124925
 8004d94:	3eaaaaab 	.word	0x3eaaaaab
 8004d98:	bd15a221 	.word	0xbd15a221
 8004d9c:	bd9d8795 	.word	0xbd9d8795
 8004da0:	bde38e38 	.word	0xbde38e38
 8004da4:	be4ccccd 	.word	0xbe4ccccd
 8004da8:	401bffff 	.word	0x401bffff
 8004dac:	08004e2c 	.word	0x08004e2c
 8004db0:	08004e1c 	.word	0x08004e1c

08004db4 <fabsf>:
 8004db4:	ee10 3a10 	vmov	r3, s0
 8004db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dbc:	ee00 3a10 	vmov	s0, r3
 8004dc0:	4770      	bx	lr
	...

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
